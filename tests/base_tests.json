[
  {
    "id": "1",
    "input": "*l=../grammar/tests/test_import_dir/nested_import1.txt;\nfiles=%*load",
    "expected_output": "{\n    \"files\": [\n        \"../grammar/tests/test_import_dir/nested_import1.txt\",\n        \"../grammar/tests/test_import_dir/nested_import2.txt\",\n        \"../grammar/tests/test_import_dir/nested_import3.txt\",\n        \"../grammar/tests/test_import_dir/test_import.txt\"\n    ]\n}",
    "tested_features": [
      "load"
    ],
    "minimised_modl": "*l=../grammar/tests/test_import_dir/nested_import1.txt;files=%*load"
  },
  {
    "id": "2",
    "input": "*l=../grammar/tests/1:../grammar/tests/2:../grammar/tests/3:../grammar/tests/1;\nfiles=%*load",
    "expected_output": "{\n    \"files\": [\n        \"../grammar/tests/1.modl\",\n        \"../grammar/tests/2.modl\",\n        \"../grammar/tests/3.modl\",\n        \"../grammar/tests/1.modl\"\n    ]\n}",
    "tested_features": [
      "load"
    ],
    "minimised_modl": "*l=../grammar/tests/1:../grammar/tests/2:../grammar/tests/3:../grammar/tests/1;files=%*load"
  },
  {
    "id": "3",
    "input": "*L=\"https://www.modl.uk/tests/message-thread.txt\";\n\nclasses=*class",
    "expected_output": "{\n    \"classes\": \"*class\"\n}",
    "tested_features": [
      "load"
    ],
    "minimised_modl": "*L=https~://www.modl.uk/tests/message-thread.txt;classes=*class"
  },
  {
    "id": "4",
    "input": "*method(\n *id=cn;\n *name=company_name;\n *transform=replace<-, >.trim<.>.initcap\n);\n\nm=%*method",
    "expected_output": "{\n    \"m\": [\n        {\n            \"cn\": {\n                \"name\": \"company_name\",\n                \"transform\": \"replace<-,>.trim<.>.initcap\"\n            }\n        }\n    ]\n}",
    "tested_features": [
      "method"
    ],
    "minimised_modl": "*m(*i=cn;*n=company_name;*transform=replace<-, >.trim<.>.initcap);m=%*method"
  },
  {
    "id": "5",
    "input": "*L=\"https://www.modl.uk/tests/message-thread.txt\";\n*class(\n *id=a;\n *name=alpha;\n *superclass=map;\n v=victor\n);\n*class(\n *id=b;\n *name=bravo;\n *superclass=alpha;\n w=whisky\n);\n*class(\n *id=c;\n *name=charlie;\n *superclass=bravo;\n x=xray\n);\n*class(\n *id=d;\n *name=delta;\n *superclass=charlie;\n y=yankee\n);\nclasses=%*class",
    "expected_output": "{\n    \"classes\": [\n        {\n            \"m\": {\n                \"name\": \"message\",\n                \"superclass\": \"map\",\n                \"assign\": [\n                    [\n                        \"direction\",\n                        \"date_time\",\n                        \"message\"\n                    ]\n                ],\n                \"method\": \"sms\"\n            }\n        },\n        {\n            \"a\": {\n                \"name\": \"alpha\",\n                \"superclass\": \"map\",\n                \"v\": \"victor\"\n            }\n        },\n        {\n            \"b\": {\n                \"name\": \"bravo\",\n                \"superclass\": \"alpha\",\n                \"w\": \"whisky\"\n            }\n        },\n        {\n            \"c\": {\n                \"name\": \"charlie\",\n                \"superclass\": \"bravo\",\n                \"x\": \"xray\"\n            }\n        },\n        {\n            \"d\": {\n                \"name\": \"delta\",\n                \"superclass\": \"charlie\",\n                \"y\": \"yankee\"\n            }\n        }\n    ]\n}",
    "tested_features": [
      "load",
      "class"
    ],
    "minimised_modl": "*L=https~://www.modl.uk/tests/message-thread.txt;*c(*i=a;*n=alpha;*s=map;v=victor);*c(*i=b;*n=bravo;*s=alpha;w=whisky);*c(*i=c;*n=charlie;*s=bravo;x=xray);*c(*i=d;*n=delta;*s=charlie;y=yankee);classes=%*class"
  },
  {
    "id": "6",
    "input": "_test1=one;\n_one=two;\n{\ntest1=`one`?\n  result=match\n/?\n  result=nomatch\n}",
    "expected_output": "{\n    \"result\": \"match\"\n}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "_test1=one;_one=two;{test1=one?result=match/?result=nomatch}"
  },
  {
    "id": "7",
    "input": "_test1=one;\n_one=two;\n{\ntest1=`two`?\n  result=match\n/?\n  result=nomatch\n}",
    "expected_output": "{\n    \"result\": \"nomatch\"\n}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "_test1=one;_one=two;{test1=two?result=match/?result=nomatch}"
  },
  {
    "id": "8",
    "input": "_test1=one;\n_one=two;\n{\ntest1=\"one\"?\n  result=match\n/?\n  result=nomatch\n}",
    "expected_output": "{\n    \"result\": \"match\"\n}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "_test1=one;_one=two;{test1=one?result=match/?result=nomatch}"
  },
  {
    "id": "9",
    "input": "_test1=one;\n_one=two;\n{\ntest1=\"two\"?\n  result=match\n/?\n  result=nomatch\n}",
    "expected_output": "{\n    \"result\": \"nomatch\"\n}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "_test1=one;_one=two;{test1=two?result=match/?result=nomatch}"
  },
  {
    "id": "10",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "11",
    "input": "_x=a:b:c:d;\n_y=[1;2;3;4];\nz={%x.1=b | %y.2=1?}\n",
    "expected_output": "{\n    \"z\": true\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_x=a:b:c:d;_y=1:2:3:4;z={%x.1=b|%y.2=1?}"
  },
  {
    "id": "12",
    "input": "_x=a:b:c:d;\n_y=[1;2;3;4];\nz={%x.1=b & %y.2=1?}\n",
    "expected_output": "{\n    \"z\": false\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_x=a:b:c:d;_y=1:2:3:4;z={%x.1=b&%y.2=1?}"
  },
  {
    "id": "13",
    "input": "_x=a:b:c:d;\n_y=[1;2;3;4];\nz={%x.1=b&%y.2=3?}",
    "expected_output": "{\n    \"z\": true\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_x=a:b:c:d;_y=1:2:3:4;z={%x.1=b&%y.2=3?}"
  },
  {
    "id": "14",
    "input": "_x=a:b:c:d;\n_y=[1;2;3;4];\nz={%x.1=b|%y.2=3?}",
    "expected_output": "{\n    \"z\": true\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_x=a:b:c:d;_y=1:2:3:4;z={%x.1=b|%y.2=3?}"
  },
  {
    "id": "15",
    "input": "_x=a:b:c:d;\n_y=[1;2;3;4];\nz={%x.1=b|%y.2=x?}",
    "expected_output": "{\n    \"z\": true\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_x=a:b:c:d;_y=1:2:3:4;z={%x.1=b|%y.2=x?}"
  },
  {
    "id": "16",
    "input": "_x=a:b:c:d;\n_y=[1;2;3;4];\nz={%x.1=a|%y.2=3?}",
    "expected_output": "{\n    \"z\": true\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_x=a:b:c:d;_y=1:2:3:4;z={%x.1=a|%y.2=3?}"
  },
  {
    "id": "17",
    "input": "_x=a:b:c:d;\n_y=[1;2;3;4];\nx={%x.1=%y.2?}",
    "expected_output": "{\n    \"x\": false\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_x=a:b:c:d;_y=1:2:3:4;x={%x.1=%y.2?}"
  },
  {
    "id": "18",
    "input": "_x=[1;2;3;4];\n_y=[1;2;3;4];\nx={%x.2=%y.2?}",
    "expected_output": "{\n    \"x\": true\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_x=1:2:3:4;_y=1:2:3:4;x={%x.2=%y.2?}"
  },
  {
    "id": "19",
    "input": "_country=gb;\n{\n  country = gb | country = us?\n    support_number=+441270123456\n  /?\n    support_number=+14161234567\n}",
    "expected_output": "{\n    \"support_number\": \"+441270123456\"\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_country=gb;{country=gb|country=us?support_number=+441270123456/?support_number=+14161234567}"
  },
  {
    "id": "20",
    "input": "_country=gb;\n{\n  country = us | country = gb?\n    support_number=+441270123456\n  /?\n    support_number=+14161234567\n}",
    "expected_output": "{\n    \"support_number\": \"+441270123456\"\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_country=gb;{country=us|country=gb?support_number=+441270123456/?support_number=+14161234567}"
  },
  {
    "id": "21",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [],
    "minimised_modl": "DELETED"
  },
  {
    "id": "22",
    "input": "(\n  name=%`e1afmkfd`.p;\n  department=%` -7sbcecqbdsccxfizhcp6b8ah`.p\n)",
    "expected_output": "{\n    \"name\": \"пример\",\n    \"department\": \"обслуживание клиентов\"\n}",
    "tested_features": [
      "punycode"
    ],
    "minimised_modl": "(name=%`e1afmkfd`.p;department=%` -7sbcecqbdsccxfizhcp6b8ah`.p)"
  },
  {
    "id": "23",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [],
    "minimised_modl": "DELETED"
  },
  {
    "id": "24",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [],
    "minimised_modl": "DELETED"
  },
  {
    "id": "25",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [],
    "minimised_modl": "DELETED"
  },
  {
    "id": "26",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [],
    "minimised_modl": "DELETED"
  },
  {
    "id": "27",
    "input": "_array[1;2];\n_array_item=%array.0;\ntest={\n  array_item=%array.0?\n     yes\n  /?\n     no\n}",
    "expected_output": "{\n    \"test\": \"yes\"\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_array=1:2;_array_item=%array.0;test={array_item=%array.0?yes/?no}"
  },
  {
    "id": "28",
    "input": "_array[1;2];\ntest={\n  %array.0=1?\n     yes\n  /?\n     no\n}",
    "expected_output": "{\n    \"test\": \"yes\"\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_array=1:2;test={%array.0=1?yes/?no}"
  },
  {
    "id": "29",
    "input": "_array[1;2];\n_array_item=%array.0;\ntest={\n  array_item=1?\n     yes\n  /?\n     no\n}",
    "expected_output": "{\n    \"test\": \"yes\"\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_array=1:2;_array_item=%array.0;test={array_item=1?yes/?no}"
  },
  {
    "id": "30",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [],
    "minimised_modl": "DELETED"
  },
  {
    "id": "31",
    "input": "*class(\n  *i=test;\n  *a=[\n    [one;two;three]\n  ]\n);\ntest=1:2:3",
    "expected_output": "{\n    \"test\": {\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3\n    }\n}",
    "tested_features": [
      "class",
      "assign"
    ],
    "minimised_modl": "*c(*i=test;*a[[one;two;three]]);test=1:2:3"
  },
  {
    "id": "32",
    "input": "*class(\n  *i=test;\n  *a=[\n    [one;two;three]\n  ]\n);\n\ntest=1:2:(a=Alpha;b=Bravo;c=Charlie)",
    "expected_output": "{\n    \"test\": {\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": {\n            \"a\": \"Alpha\",\n            \"b\": \"Bravo\",\n            \"c\": \"Charlie\"\n        }\n    }\n}",
    "tested_features": [
      "class",
      "assign"
    ],
    "minimised_modl": "*c(*i=test;*a[[one;two;three]]);test=1:2:(a=Alpha;b=Bravo;c=Charlie)"
  },
  {
    "id": "33",
    "input": "*class(\n  *i=test;\n  *a=[\n    [one;two;three]\n  ]\n);\n\ntest=1:2:[a;b;c]",
    "expected_output": "{\n    \"test\": {\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": [\n            \"a\",\n            \"b\",\n            \"c\"\n        ]\n    }\n}",
    "tested_features": [
      "class",
      "assign"
    ],
    "minimised_modl": "*c(*i=test;*a[[one;two;three]]);test=1:2:[a;b;c]"
  },
  {
    "id": "34",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [],
    "minimised_modl": "DELETED"
  },
  {
    "id": "35",
    "input": "[\none;\ntwo;\nthree;\n]",
    "expected_output": "[\n    \"one\",\n    \"two\",\n    \"three\"\n]",
    "tested_features": [
      "array"
    ],
    "minimised_modl": "[one;two;three]"
  },
  {
    "id": "36",
    "input": "[\none;\ntwo;\nthree\n]",
    "expected_output": "[\n    \"one\",\n    \"two\",\n    \"three\"\n]",
    "tested_features": [
      "array"
    ],
    "minimised_modl": "[one;two;three]"
  },
  {
    "id": "37",
    "input": "_country = gb;\nsupport_contact = {\ncountry=gb?\n}",
    "expected_output": "{\n    \"support_contact\": true\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_country=gb;support_contact={country=gb?}"
  },
  {
    "id": "38",
    "input": " *class(\n *id=a;\n *name=alpha;\n *superclass=map;\n v=victor\n);\n*class(\n *id=b;\n *name=bravo;\n *superclass=alpha;\n w=whisky\n);\n*class(\n *id=c;\n *name=charlie;\n *superclass=bravo;\n x=xray\n);\n*class(\n *id=d;\n *name=delta;\n *superclass=charlie;\n y=yankee\n);\nd(test1=test2)",
    "expected_output": "{\n    \"delta\": {\n        \"test1\": \"test2\",\n        \"y\": \"yankee\",\n        \"x\": \"xray\",\n        \"w\": \"whisky\",\n        \"v\": \"victor\"\n    }\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;*s=map;v=victor);*c(*i=b;*n=bravo;*s=alpha;w=whisky);*c(*i=c;*n=charlie;*s=bravo;x=xray);*c(*i=d;*n=delta;*s=charlie;y=yankee);d(test1=test2)"
  },
  {
    "id": "39",
    "input": "*class(\n *id=a;\n *name=alpha;\n *superclass=map;\n v=victor\n);\n*class(\n *id=b;\n *name=bravo;\n *superclass=a;\n w=whisky\n);\n*class(\n *id=c;\n *name=charlie;\n *superclass=b;\n x=xray\n);\n*class(\n *id=d;\n *name=delta;\n *superclass=c;\n y=yankee\n);\nd(test1=test2)",
    "expected_output": "{\n    \"delta\": {\n        \"test1\": \"test2\",\n        \"y\": \"yankee\",\n        \"x\": \"xray\",\n        \"w\": \"whisky\",\n        \"v\": \"victor\"\n    }\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;*s=map;v=victor);*c(*i=b;*n=bravo;*s=a;w=whisky);*c(*i=c;*n=charlie;*s=b;x=xray);*c(*i=d;*n=delta;*s=c;y=yankee);d(test1=test2)"
  },
  {
    "id": "40",
    "input": "_test=[[a;b]];letters2=%test.0.0",
    "expected_output": "{\n    \"letters2\": \"a\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test[[a;b]];letters2=%test.0.0"
  },
  {
    "id": "41",
    "input": "?=`e1afmkfd`:` -7sbcecqbdsccxfizhcp6b8ah`;(name=%0.p;department=%1.p)",
    "expected_output": "{\n    \"name\": \"пример\",\n    \"department\": \"обслуживание клиентов\"\n}",
    "tested_features": [
      "object_ref",
      "punycode"
    ],
    "minimised_modl": "?=e1afmkfd:` -7sbcecqbdsccxfizhcp6b8ah`;(name=%0.p;department=%1.p)"
  },
  {
    "id": "42",
    "input": "*class(*id=object;*superclass=arr);sales(name=John Smith;telephone=44800 555 555);service(name=Jim Brown;telephone=44800 666 666)",
    "expected_output": "{\n    \"sales\": {\n        \"name\": \"John Smith\",\n        \"telephone\": \"44800 555 555\"\n    },\n    \"service\": {\n        \"name\": \"Jim Brown\",\n        \"telephone\": \"44800 666 666\"\n    }\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=object;*s=arr);sales(name=John Smith;telephone=44800 555 555);service(name=Jim Brown;telephone=44800 666 666)"
  },
  {
    "id": "43",
    "input": "*class(\n *id=p;\n *NAME=person\n);\n\np(name=John Smith;dob=01/01/2001)",
    "expected_output": "{\n    \"person\": {\n        \"name\": \"John Smith\",\n        \"dob\": \"01/01/2001\"\n    }\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=p;*n=person);p(name=John Smith;dob=01/01/2001)"
  },
  {
    "id": "44",
    "input": "*class(*id=a;*name=age);a=10",
    "expected_output": "{\n    \"age\": 10\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=a;*n=age);a=10"
  },
  {
    "id": "45",
    "input": "*class(*id=a;*name=age;*superclass=num);a=10",
    "expected_output": "{\n    \"age\": 10\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=a;*n=age;*s=num);a=10"
  },
  {
    "id": "46",
    "input": "*class(*id=a;*name=age;*superclass=str);a=10",
    "expected_output": "{\n    \"age\": \"10\"\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=a;*n=age;*s=str);a=10"
  },
  {
    "id": "47",
    "input": "*class(*id=newstr;*superclass=str);*class(*id=a;*name=age;*superclass=newstr);a=10",
    "expected_output": "{\n    \"age\": \"10\"\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=newstr;*s=str);*c(*i=a;*n=age;*s=newstr);a=10"
  },
  {
    "id": "48",
    "input": "?[[a;b;c]];letters=%0",
    "expected_output": "{\n    \"letters\": [\n        \"a\",\n        \"b\",\n        \"c\"\n    ]\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?[[a;b;c]];letters=%0"
  },
  {
    "id": "49",
    "input": "?=[a;b;c;d]:[1;2;3;4;5];\ntest=%1.0",
    "expected_output": "{\n    \"test\": 1\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?=[a;b;c;d]:[1;2;3;4;5];test=%1.0"
  },
  {
    "id": "50",
    "input": "_test=123;object(print_test = %test.test)",
    "expected_output": "{\n    \"object\": {\n        \"print_test\": \"123.test\"\n    }\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test=123;object(print_test = %test.test)"
  },
  {
    "id": "51",
    "input": "?=one:two:three;test1=%0;test2=%1;test3=%2;test4=%3;test5=%4;test6=%5;test7=%6;test8=%7;test9=%8",
    "expected_output": "{\n    \"test1\": \"one\",\n    \"test2\": \"two\",\n    \"test3\": \"three\",\n    \"test4\": \"%3\",\n    \"test5\": \"%4\",\n    \"test6\": \"%5\",\n    \"test7\": \"%6\",\n    \"test8\": \"%7\",\n    \"test9\": \"%8\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?=one:two:three;test1=%0;test2=%1;test3=%2;test4=%3;test5=%4;test6=%5;test7=%6;test8=%7;test9=%8"
  },
  {
    "id": "52",
    "input": "a=1:2:3;b=4:5:6",
    "expected_output": "{\n    \"a\": [\n        1,\n        2,\n        3\n    ],\n    \"b\": [\n        4,\n        5,\n        6\n    ]\n}",
    "tested_features": [
      "nbArray"
    ],
    "minimised_modl": "a=1:2:3;b=4:5:6"
  },
  {
    "id": "53",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "54",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "55",
    "input": "a=1:2:3;\nb=4:5:6",
    "expected_output": "{\n    \"a\": [\n        1,\n        2,\n        3\n    ],\n    \"b\": [\n        4,\n        5,\n        6\n    ]\n}",
    "tested_features": [
      "nbArray"
    ],
    "minimised_modl": "a=1:2:3;\nb=4:5:6"
  },
  {
    "id": "56",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "57",
    "input": "a=1:2:3\n;\nb=4:5:6",
    "expected_output": "{\n    \"a\": [\n        1,\n        2,\n        3\n    ],\n    \"b\": [\n        4,\n        5,\n        6\n    ]\n}",
    "tested_features": [
      "nbArray"
    ],
    "minimised_modl": "a=1:2:3;b=4:5:6"
  },
  {
    "id": "58",
    "input": "_test=(a=b=c=d=f);\nx=%test.a.b.c.d",
    "expected_output": "{\n    \"x\": \"f\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test(a=b=c=d=f);x=%test.a.b.c.d"
  },
  {
    "id": "59",
    "input": "a(b(c(d(e(f=1)))));\ntesting=%a.b.c.d.e.f",
    "expected_output": "{\n    \"a\": {\n        \"b\": {\n            \"c\": {\n                \"d\": {\n                    \"e\": {\n                        \"f\": 1\n                    }\n                }\n            }\n        }\n    },\n    \"testing\": 1\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "a(b(c(d(e(f=1)))));testing=%a.b.c.d.e.f"
  },
  {
    "id": "60",
    "input": "_test=(a=b=c=d=f);\ntesting=%test.a.b.c.d",
    "expected_output": "{\n    \"testing\": \"f\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test(a=b=c=d=f);testing=%test.a.b.c.d"
  },
  {
    "id": "61",
    "input": "a=\nb\n=c;\nd=e",
    "expected_output": "{\n    \"a\": {\n        \"b\": \"c\"\n    },\n    \"d\": \"e\"\n}",
    "tested_features": [
      "map"
    ],
    "minimised_modl": "a=b=c;d=e"
  },
  {
    "id": "62",
    "input": "test=this is a #hashtag test;test2=#testing 123",
    "expected_output": "{\n    \"test\": \"this is a #hashtag test\",\n    \"test2\": \"#testing 123\"\n}",
    "tested_features": [
      "pair"
    ],
    "minimised_modl": "test=this is a #hashtag test;test2=#testing 123"
  },
  {
    "id": "63",
    "input": "a=(b=c=d=e=f)",
    "expected_output": "{\n    \"a\": {\n        \"b\": {\n            \"c\": {\n                \"d\": {\n                    \"e\": \"f\"\n                }\n            }\n        }\n    }\n}",
    "tested_features": [
      "map"
    ],
    "minimised_modl": "a(b=c=d=e=f)"
  },
  {
    "id": "64",
    "input": "a=b=c=d=e=f",
    "expected_output": "{\n    \"a\": {\n        \"b\": {\n            \"c\": {\n                \"d\": {\n                    \"e\": \"f\"\n                }\n            }\n        }\n    }\n}",
    "tested_features": [
      "map"
    ],
    "minimised_modl": "a=b=c=d=e=f"
  },
  {
    "id": "65",
    "input": "a=(b=(c=(d=(e=f))))",
    "expected_output": "{\n    \"a\": {\n        \"b\": {\n            \"c\": {\n                \"d\": {\n                    \"e\": \"f\"\n                }\n            }\n        }\n    }\n}",
    "tested_features": [
      "map"
    ],
    "minimised_modl": "a(b(c(d(e=f))))"
  },
  {
    "id": "66",
    "input": "country=gb;\nx=[{ country=gb ? this /country=us? that }]",
    "expected_output": "{\n    \"country\": \"gb\",\n    \"x\": [\n        \"this\"\n    ]\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "country=gb;x[{country=gb?this/country=us?that}]"
  },
  {
    "id": "67",
    "input": "_a=3;_b=3;c={a=b?true/?false}",
    "expected_output": "{\n    \"c\": false\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_a=3;_b=3;c={a=b?01/?00}"
  },
  {
    "id": "68",
    "input": "a=1;b=2;c={{a=1}|{b=2}?true/?false}",
    "expected_output": "{\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": true\n}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "a=1;b=2;c={{a=1}|{b=2}?01/?00}"
  },
  {
    "id": "69",
    "input": "_a=1;\n_b=2;\nx={a=b?}",
    "expected_output": "{\n    \"x\": false\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_a=1;_b=2;x={a=b?}"
  },
  {
    "id": "70",
    "input": "_a=1;\n_b=1;\nx={a=b?}",
    "expected_output": "{\n    \"x\": false\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_a=1;_b=1;x={a=b?}"
  },
  {
    "id": "71",
    "input": "_testing = quick-test of John's variable_methods;\nupcase_example = %testing.u;\ndowncase_example = %testing.d;\ninitcap_example = %testing.i;\nsentence_example = %testing.s;\nurl_encode_example = %testing.u.e",
    "expected_output": "{\n    \"upcase_example\": \"QUICK-TEST OF JOHN'S VARIABLE_METHODS\",\n    \"downcase_example\": \"quick-test of john's variable_methods\",\n    \"initcap_example\": \"Quick-test Of John's Variable_methods\",\n    \"sentence_example\": \"Quick-test of John's variable_methods\",\n    \"url_encode_example\": \"QUICK-TEST+OF+JOHN%27S+VARIABLE_METHODS\"\n}",
    "tested_features": [
      "string_method"
    ],
    "minimised_modl": "_testing=quick-test of John's variable_methods;upcase_example=%testing.u;downcase_example=%testing.d;initcap_example=%testing.i;sentence_example=%testing.s;url_encode_example=%testing.u.e"
  },
  {
    "id": "72",
    "input": "*VERSION=1;\n\"test\"=1",
    "expected_output": "{\n    \"test\": 1\n}",
    "tested_features": [
      "version"
    ],
    "minimised_modl": "*VERSION=1;test=1"
  },
  {
    "id": "73",
    "input": "*VERSION=100;\n\"test\"=1",
    "expected_output": "{\n    \"test\": 1\n}",
    "tested_features": [
      "version"
    ],
    "minimised_modl": "*VERSION=100;test=1"
  },
  {
    "id": "74",
    "input": "*class(\n *id=g;\n *name=glossary;\n *superclass=map\n);\n*class(\n *id=t;\n *name=title;\n *superclass=str\n);\n*class(\n *id=d;\n *name=GlossDiv;\n *superclass=map\n);\n*class(\n *id=l;\n *name=GlossList;\n *superclass=map\n);\n*class(\n *id=e;\n *name=GlossEntry;\n *superclass=map;\n *assign[\n   [i;s;gt;a;ab;gd;gs]\n ]\n);\n*class(\n *id=i;\n *name=ID;\n *superclass=str\n);\n*class(\n *id=s;\n *name=SortAs;\n *superclass=str\n);\n*class(\n *id=gt;\n *name=GlossTerm;\n *superclass=str\n);\n*class(\n *id=a;\n *name=Acronym;\n *superclass=str\n);\n*class(\n *id=ab;\n *name=Abbrev;\n *superclass=str\n);\n*class(\n *id=gd;\n *name=GlossDef;\n *assign=[\n   [p];\n   [p;sa]\n ]\n);\n*class(\n *id=p;\n *name=para;\n *superclass=str\n);\n*class(\n *id=sa;\n *name=SeeAlso;\n *superclass=arr\n);\n*class(\n *id=gs;\n *name=GlossSee;\n *superclass=str\n);\n\ng(\n ?=[SGML;markup;language];\n t=example glossary;\n d(\n   t=S;\n   l(\n     e(\n       i=%0;\n       s=%0;\n       gt=Standard Generalized %1.s %2.s;\n       a=%0;\n       ab=ISO 8879\\:1986;\n       gd=A meta-%1 %2, used to create %1 %2%s such as DocBook.\n         :[GML;XML];\n       gs=%1\n     )\n   )\n )\n)",
    "expected_output": "{\n    \"glossary\": {\n        \"title\": \"example glossary\",\n        \"GlossDiv\": {\n            \"title\": \"S\",\n            \"GlossList\": {\n                \"GlossEntry\": {\n                    \"ID\": \"SGML\",\n                    \"SortAs\": \"SGML\",\n                    \"GlossTerm\": \"Standard Generalized Markup Language\",\n                    \"Acronym\": \"SGML\",\n                    \"Abbrev\": \"ISO 8879:1986\",\n                    \"GlossDef\": {\n                        \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\",\n                        \"SeeAlso\": [\n                            \"GML\",\n                            \"XML\"\n                        ]\n                    },\n                    \"GlossSee\": \"markup\"\n                }\n            }\n        }\n    }\n}",
    "tested_features": [
      "class",
      "object_ref",
      "string_method"
    ],
    "minimised_modl": "*c(*i=g;*n=glossary;*s=map);*c(*i=t;*n=title;*s=str);*c(*i=d;*n=GlossDiv;*s=map);*c(*i=l;*n=GlossList;*s=map);*c(*i=e;*n=GlossEntry;*s=map;*a[[i;s;gt;a;ab;gd;gs]]);*c(*i=i;*n=ID;*s=str);*c(*i=s;*n=SortAs;*s=str);*c(*i=gt;*n=GlossTerm;*s=str);*c(*i=a;*n=Acronym;*s=str);*c(*i=ab;*n=Abbrev;*s=str);*c(*i=gd;*n=GlossDef;*a=[p]:[p;sa]);*c(*i=p;*n=para;*s=str);*c(*i=sa;*n=SeeAlso;*s=arr);*c(*i=gs;*n=GlossSee;*s=str);g(?=SGML:markup:language;t=example glossary;d(t=S;l(e(i=%0;s=%0;gt=Standard Generalized %1.s %2.s;a=%0;ab=ISO 8879\\:1986;gd=A meta-%1 %2, used to create %1 %2%s such as DocBook.:[GML;XML];gs=%1))))"
  },
  {
    "id": "75",
    "input": "_test=1~:2;\n\nresult={\n test=1~:2?\n     yes\n /?\n    no\n}",
    "expected_output": "{\n    \"result\": \"yes\"\n}",
    "tested_features": [
      "class",
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_test=1~:2;result={test=1~:2?yes/?no}"
  },
  {
    "id": "76",
    "input": "_test=\"http://www.tesco.com\";\n\nresult={\n test=\"http://www.tesco.com\"?\n     yes\n /?\n    no\n}",
    "expected_output": "{\n    \"result\": \"yes\"\n}",
    "tested_features": [
      "class",
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_test=http~://www.tesco.com;result={test=`http://www.tesco.com`?yes/?no}"
  },
  {
    "id": "77",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "78",
    "input": "_branch=\"alex.\";\n_root=d;\nnamespace=%branch%blah.%root",
    "expected_output": "{\n    \"namespace\": \"alex.blah.d\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_branch=alex.;_root=d;namespace=%branch%blah.%root"
  },
  {
    "id": "79",
    "input": "namespace=%branch%blah.%root",
    "expected_output": "{\n    \"namespace\": \"%branch%blah.%root\"\n}",
    "tested_features": [
      "pair",
      "graves"
    ],
    "minimised_modl": "namespace=%branch%blah.%root"
  },
  {
    "id": "80",
    "input": "_root=tesco.com;\n_branch=direct.;\nnamespace1=%branch%numrecord.%root;\nnamespace2=%branch%_%root%.numq.net",
    "expected_output": "{\n    \"namespace1\": \"direct.numrecord.tesco.com\",\n    \"namespace2\": \"direct._tesco.com.numq.net\"\n}",
    "tested_features": [
      "object_ref",
      "graves"
    ],
    "minimised_modl": "_root=tesco.com;_branch=direct.;namespace1=%branch%numrecord.%root;namespace2=%branch%_%root%.numq.net"
  },
  {
    "id": "81",
    "input": "_branch=\"\";\n_root=\"\";\nnamespace=%branch%numrecord.%root",
    "expected_output": "{\n    \"namespace\": \"numrecord.\"\n}",
    "tested_features": [
      "object_ref",
      "graves"
    ],
    "minimised_modl": "_branch=``;_root=``;namespace=%branch%numrecord.%root"
  },
  {
    "id": "82",
    "input": "*class(\n *id=desc;\n *name=description;\n *superclass=str\n);\n\n*class(\n *id=val;\n *name=value;\n *superclass=str\n);\n\n*class(\n *id=media1;\n *name=media1;\n *assign=[\n   [desc;val]\n ]\n);\n\n*class(\n *id=media2;\n *name=media2;\n *assign=[\n   [desc;val]\n ]\n);\n*class(\n *id=list;\n *name=list;\n *assign[\n   [media1;media2]\n ]\n);\n\n\nlist=[tel;fb]:[yt;tw]",
    "expected_output": "{\n  \"list\": [\n    {\n      \"description\": \"tel\",\n      \"value\": \"fb\"\n    },\n    {\n      \"description\": \"yt\",\n      \"value\": \"tw\"\n    }\n  ]\n}",
    "tested_features": [
      "class",
      "assign"
    ],
    "minimised_modl": "*c(*i=desc;*n=description;*s=str);*c(*i=val;*n=value;*s=str);*c(*i=media1;*n=media1;*a[[desc;val]]);*c(*i=media2;*n=media2;*a[[desc;val]]);*c(*i=list;*n=list;*a[[media1;media2]]);list=[tel;fb]:[yt;tw]"
  },
  {
    "id": "83",
    "input": "*CLASS(\n *id=p;\n *name=person;\n *SUPERCLASS=map\n);\n\np(name=John Smith;dob=01/01/2000)",
    "expected_output": "{\n    \"person\": {\n        \"name\": \"John Smith\",\n        \"dob\": \"01/01/2000\"\n    }\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=p;*n=person;*s=map);p(name=John Smith;dob=01/01/2000)"
  },
  {
    "id": "84",
    "input": "*c(\n *i=m;\n *n=message;\n *S=map;\n *a=[\n   [direction;date_time;message]\n ];\n method=sms\n);\nm=in:2018-03-22:hi",
    "expected_output": "{\n    \"message\": {\n        \"direction\": \"in\",\n        \"date_time\": \"2018-03-22\",\n        \"message\": \"hi\",\n        \"method\": \"sms\"\n    }\n}",
    "tested_features": [
      "class",
      "assign"
    ],
    "minimised_modl": "*c(*i=m;*n=message;*S=map;*a[[direction;date_time;message]];method=sms);m=in:2018-03-22:hi"
  },
  {
    "id": "85",
    "input": "*class(\n *id=car;\n *name=car;\n *superclass=map\n);\n\ncar(\n make=Bentley\n)",
    "expected_output": "{\n    \"car\": {\n        \"make\": \"Bentley\"\n    }\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=car;*n=car;*s=map);car(make=Bentley)"
  },
  {
    "id": "86",
    "input": "?=[one;two];\ntest=Blah %0.s %1.s",
    "expected_output": "{\n    \"test\": \"Blah One Two\"\n}",
    "tested_features": [
      "object_ref",
      "graves",
      "string_method"
    ],
    "minimised_modl": "?=one:two;test=Blah %0.s %1.s"
  },
  {
    "id": "87",
    "input": "?=one:two;\ntest=Blah %0.r<o,huzzah> %1.t<w>",
    "expected_output": "{\n    \"test\": \"Blah huzzahne t\"\n}",
    "tested_features": [
      "object_ref",
      "graves",
      "string_method"
    ],
    "minimised_modl": "?=one:two;test=Blah %0.r<o,huzzah> %1.t<w>"
  },
  {
    "id": "88",
    "input": "_test=\"123\";\nobject(\n print_test = %test%.test\n)",
    "expected_output": "{\n    \"object\": {\n        \"print_test\": \"123.test\"\n    }\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test=`123`;object(print_test=%test%.test)"
  },
  {
    "id": "89",
    "input": "_var = NotThisOne;\n_var=%var%blah;\nout=%var%deblah",
    "expected_output": "{\n    \"out\": \"NotThisOneblahdeblah\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_var = NotThisOne;_var=%var%blah;out=%var%deblah"
  },
  {
    "id": "90",
    "input": "_var = NotThisOne;\n_var=blah;\nout=%var%deblah",
    "expected_output": "{\n    \"out\": \"blahdeblah\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_var = NotThisOne;_var=blah;out=%var%deblah"
  },
  {
    "id": "91",
    "input": "test(\n map(\n   array[]\n );\n array[\n   map();\n   array[1;2;3]\n ]\n)",
    "expected_output": "{\n    \"test\": {\n        \"map\": {\n            \"array\": []\n        },\n        \"array\": [\n            {\n                \"map\": {}\n            },\n            {\n                \"array\": [\n                    1,\n                    2,\n                    3\n                ]\n            }\n        ]\n    }\n}",
    "tested_features": [
      "array",
      "map"
    ],
    "minimised_modl": "test(map(array[]);array[map();array=1:2:3])"
  },
  {
    "id": "92",
    "input": "{\n01?\n test=1\n}",
    "expected_output": "{\n    \"test\": 1\n}",
    "tested_features": [
      "conditional",
      "pair"
    ],
    "minimised_modl": "{01?test=1}"
  },
  {
    "id": "93",
    "input": "test=()",
    "expected_output": "{\n    \"test\": {}\n}",
    "tested_features": [
      "map"
    ],
    "minimised_modl": "test()"
  },
  {
    "id": "94",
    "input": "_co=at;\n_l=de;\n{\n co=at?\n   country=Austria;\n   language={\n     l=fr?\n       French\n     /l=de?\n       German\n     /?\n       Other\n   }\n /?\n   country=Other\n}",
    "expected_output": "{\n    \"country\": \"Austria\",\n    \"language\": \"German\"\n}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "_co=at;_l=de;{co=at?country=Austria;language={l=fr?French/l=de?German/?Other}/?country=Other}"
  },
  {
    "id": "95",
    "input": "true2 = 01;\ntrue1 = true;\nfalse2 = 00;\nfalse1 = false;\nnull2 = 000;\nnull1 = null",
    "expected_output": "{\n    \"true2\": true,\n    \"true1\": true,\n    \"false2\": false,\n    \"false1\": false,\n    \"null2\": null,\n    \"null1\": null\n}",
    "tested_features": [
      "bool",
      "map",
      "null"
    ],
    "minimised_modl": "true2=01;true1=01;false2=00;false1=00;null2=000;null1=000"
  },
  {
    "id": "96",
    "input": "_person(  \n name(\n   first=John;\n   last=Smith\n )\n);\nsay=%person.name.first",
    "expected_output": "{\n    \"say\": \"John\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_person(name(first=John;last=Smith));say=%person.name.first"
  },
  {
    "id": "97",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "98",
    "input": "_C=gb;\n_COUNTRIES(\n us=United States;\n gb=United Kingdom;\n de=Germany\n);\n\ncountry_name = %COUNTRIES.%C",
    "expected_output": "{\n    \"country_name\": \"United Kingdom\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_C=gb;_COUNTRIES(us=United States;gb=United Kingdom;de=Germany);country_name=%COUNTRIES.%C"
  },
  {
    "id": "99",
    "input": "*class(\n *id=car;\n *name=car;\n *superclass=map;\n *assign=[\n   [m];\n   [m;md]\n ]\n);\n\n_C=gb;\n\ncar=Bentley:{C=ru?ContinentalRussia GT/?Continental GT}",
    "expected_output": "{\n    \"car\": {\n        \"m\": \"Bentley\",\n        \"md\": \"Continental GT\"\n    }\n}",
    "tested_features": [
      "object_ref",
      "class",
      "assign",
      "conditional"
    ],
    "minimised_modl": "*c(*i=car;*n=car;*s=map;*a=[m]:[m;md]);_C=gb;car=Bentley:{C=ru?ContinentalRussia GT/?Continental GT}"
  },
  {
    "id": "100",
    "input": "_person(  \n name(\n   first=\"John\"\n )\n);\na=%person.name.first",
    "expected_output": "{\n    \"a\": \"John\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_person(name(first=John));a=%person.name.first"
  },
  {
    "id": "101",
    "input": "?=[a;b;c;d]:[1;2;3;4;5];\ntest=%1",
    "expected_output": "{\n    \"test\": [\n        1,\n        2,\n        3,\n        4,\n        5\n    ]\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?=[a;b;c;d]:[1;2;3;4;5];test=%1"
  },
  {
    "id": "102",
    "input": "_test=123;\nprint=%_test",
    "expected_output": "{\n    \"print\": 123\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test=123;print=%_test"
  },
  {
    "id": "103",
    "input": "_test=abc;\n\n{\n test?\n   result=test is defined\n /?\n   result=test is not defined\n}",
    "expected_output": "{\n    \"result\": \"test is defined\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_test=abc;{test?result=test is defined/?result=test is not defined}"
  },
  {
    "id": "104",
    "input": "{\n true?\n   result=true\n}\n",
    "expected_output": "{\n    \"result\": true\n}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "{01?result=01}"
  },
  {
    "id": "105",
    "input": "_test=true;\n\n{\n test?\n   result=%test\n}\n",
    "expected_output": "{\n    \"result\": true\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_test=01;{test?result=%test}"
  },
  {
    "id": "106",
    "input": "_test=false;\n\n{\n test?\n   result=result is true\n /?\n   result=result is false\n}",
    "expected_output": "{\n    \"result\": \"result is false\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_test=00;{test?result=result is true/?result=result is false}"
  },
  {
    "id": "107",
    "input": "{\n test?\n   result=test is defined\n /?\n   result=test is not defined\n}\n",
    "expected_output": "{\n    \"result\": \"test is not defined\"\n}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "{test?result=test is defined/?result=test is not defined}"
  },
  {
    "id": "108",
    "input": "{\n !test?\n   result=test is not defined\n /?\n   result=test is defined\n}\n",
    "expected_output": "{\n    \"result\": \"test is not defined\"\n}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "{!test?result=test is not defined/?result=test is defined}"
  },
  {
    "id": "109",
    "input": "_colour = green;\n_test = { colour=green? true /? false }; \n\n{\n !test?\n   result=it's not green\n /?\n   result=it's green\n}",
    "expected_output": "{\n    \"result\": \"it's green\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_colour=green;_test={colour=green?01/?00};{!test?result=it's not green/?result=it's green}"
  },
  {
    "id": "110",
    "input": "_test=1;\nresult={\n %test=1?\n   yes\n /?\n   no\n}",
    "expected_output": "{\n    \"result\": \"yes\"\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_test=1;result={%test=1?yes/?no}"
  },
  {
    "id": "111",
    "input": "_test=1;\nresult={\n test=1?\n   yes\n /?\n   no\n}",
    "expected_output": "{\n    \"result\": \"yes\"\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_test=1;result={test=1?yes/?no}"
  },
  {
    "id": "112",
    "input": "_test=1;\nresult={\n _test=1?\n   yes\n /?\n   no\n}",
    "expected_output": "{\n    \"result\": \"yes\"\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_test=1;result={_test=1?yes/?no}"
  },
  {
    "id": "113",
    "input": "_test=1;\nresult={\n %_test=1?\n   yes\n /?\n   no\n}",
    "expected_output": "{\n    \"result\": \"yes\"\n}",
    "tested_features": [
      "conditional",
      "object_ref"
    ],
    "minimised_modl": "_test=1;result={%_test=1?yes/?no}"
  },
  {
    "id": "114",
    "input": "?[[a;b;c];[one;two;three]];letters=%0;numbers=%1",
    "expected_output": "{\n    \"letters\": [\n        \"a\",\n        \"b\",\n        \"c\"\n    ],\n    \"numbers\": [\n        \"one\",\n        \"two\",\n        \"three\"\n    ]\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?=[a;b;c]:[one;two;three];letters=%0;numbers=%1"
  },
  {
    "id": "115",
    "input": "?=[a;b;c]:[one;two;three];letters=%0;numbers=%1",
    "expected_output": "{\n    \"letters\": [\n        \"a\",\n        \"b\",\n        \"c\"\n    ],\n    \"numbers\": [\n        \"one\",\n        \"two\",\n        \"three\"\n    ]\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?=[a;b;c]:[one;two;three];letters=%0;numbers=%1"
  },
  {
    "id": "116",
    "input": "?[a;b;c];letters=%0",
    "expected_output": "{\n    \"letters\": \"a\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?=a:b:c;letters=%0"
  },
  {
    "id": "117",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "118",
    "input": "test=[zero;one]:[a;b]",
    "expected_output": "{\n    \"test\": [\n        [\n            \"zero\",\n            \"one\"\n        ],\n        [\n            \"a\",\n            \"b\"\n        ]\n    ]\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "test=[zero;one]:[a;b]"
  },
  {
    "id": "119",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "120",
    "input": "?[zero;one;two];\nfirst_var=%0;\nsecond_var=%1;\nthird_var=%2",
    "expected_output": "{\n    \"first_var\": \"zero\",\n    \"second_var\": \"one\",\n    \"third_var\": \"two\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?=zero:one:two;first_var=%0;second_var=%1;third_var=%2"
  },
  {
    "id": "121",
    "input": "_C=gb;\no(\n{C=gb?test1=123};\ntest2=456\n)",
    "expected_output": "{\n    \"o\": {\n        \"test1\": 123,\n        \"test2\": 456\n    }\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_C=gb;o({C=gb?test1=123};test2=456)"
  },
  {
    "id": "122",
    "input": "{\ntrue?\n test=1\n}",
    "expected_output": "{\n    \"test\": 1\n}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "{01?test=1}"
  },
  {
    "id": "123",
    "input": "_test[a;b;c];alex=%test",
    "expected_output": "{\n    \"alex\": [\n        \"a\",\n        \"b\",\n        \"c\"\n    ]\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test=a:b:c;alex=%test"
  },
  {
    "id": "124",
    "input": "_test[a;b;c];alex=%test.0",
    "expected_output": "{\n    \"alex\": \"a\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test=a:b:c;alex=%test.0"
  },
  {
    "id": "125",
    "input": "?[a;b;c];alex=%0",
    "expected_output": "{\n    \"alex\": \"a\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?=a:b:c;alex=%0"
  },
  {
    "id": "126",
    "input": "_bool=true;\n{\n%bool?\n test=1\n}",
    "expected_output": "{\n    \"test\": 1\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_bool=01;{%bool?test=1}"
  },
  {
    "id": "127",
    "input": "_co = gb;\ntest = {\n co = gb?\n   UK\n /?\n   Other\n}",
    "expected_output": "{\n    \"test\": \"UK\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_co=gb;test={co=gb?UK/?Other}"
  },
  {
    "id": "128",
    "input": "?=0:1:2;\nresult={\n%1>1?\n yes\n/?\n no\n}",
    "expected_output": "{\n    \"result\": \"no\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "?=0:1:2;result={%1>1?yes/?no}"
  },
  {
    "id": "129",
    "input": "_test_vars(\n one = 1;\n two = 2\n);\n\nfirst_number = %test_vars.one",
    "expected_output": "{\n    \"first_number\": 1\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_test_vars(one=1;two=2);first_number=%test_vars.one"
  },
  {
    "id": "130",
    "input": "_C=gb;\n_COUNTRIES[\n United States;\n United Kingdom;\n Germany\n];\n\ncountry_name = %COUNTRIES.0",
    "expected_output": "{\n    \"country_name\": \"United States\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_C=gb;_COUNTRIES=United States:United Kingdom:Germany;country_name=%COUNTRIES.0"
  },
  {
    "id": "131",
    "input": "(_C=gb;\n{C=gb?test1=123};\ntest2=456)",
    "expected_output": "{\n    \"test1\": 123,\n    \"test2\": 456\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "(_C=gb;{C=gb?test1=123};test2=456)"
  },
  {
    "id": "132",
    "input": "alex=1.2345",
    "expected_output": "{\n    \"alex\": 1.2345\n}",
    "tested_features": [
      "pair"
    ],
    "minimised_modl": "alex=1.2345"
  },
  {
    "id": "133",
    "input": "?=zero:one:two;\ndiscount=%30",
    "expected_output": "{\n    \"discount\": \"%30\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?=zero:one:two;discount=%30"
  },
  {
    "id": "134",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "135",
    "input": "{\nTRUE?\n test=1\n}",
    "expected_output": "{\n    \"test\": 1\n}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "{01?test=1}"
  },
  {
    "id": "136",
    "input": "_test=abcdefg;\nresult={\n {test!=a*}?\n   in\n /?\n   out\n}",
    "expected_output": "{\n    \"result\": \"out\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_test=abcdefg;result={{test!=a*}?in/?out}"
  },
  {
    "id": "137",
    "input": "test=[]",
    "expected_output": "{\n    \"test\": []\n}",
    "tested_features": [
      "pair",
      "array"
    ],
    "minimised_modl": "test[]"
  },
  {
    "id": "138",
    "input": "test(\n empty_array=[];\n empty_map=()\n)\n",
    "expected_output": "{\n    \"test\": {\n        \"empty_array\": [],\n        \"empty_map\": {}\n    }\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "test(empty_array[];empty_map())"
  },
  {
    "id": "139",
    "input": "_num1 = 2;\n_num2 = 1000;\n\nresult={\n num1>%num2?\n   num1 is bigger\n /?\n   num1 is not bigger\n}\n",
    "expected_output": "{\n    \"result\": \"num1 is not bigger\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_num1=2;_num2=1000;result={num1>%num2?num1 is bigger/?num1 is not bigger}"
  },
  {
    "id": "140",
    "input": "?=0:1:2;\nzero=%0;\none=%1;\ntwo=%2",
    "expected_output": "{\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?=0:1:2;zero=%0;one=%1;two=%2"
  },
  {
    "id": "141",
    "input": "?=a:b:c;\nzero=%0;\none=%1;\ntwo=%2\n",
    "expected_output": "{\n    \"zero\": \"a\",\n    \"one\": \"b\",\n    \"two\": \"c\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?=a:b:c;zero=%0;one=%1;two=%2"
  },
  {
    "id": "142",
    "input": "_num1 = 5;\n_num2 = 2;\n\nresult={\n num1>%num2?\n   num1 is bigger\n /?\n   num1 is not bigger\n}",
    "expected_output": "{\n    \"result\": \"num1 is bigger\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_num1=5;_num2=2;result={num1>%num2?num1 is bigger/?num1 is not bigger}"
  },
  {
    "id": "143",
    "input": "?=\"A\":B:C;\nfirst_letter=%0",
    "expected_output": "{\n    \"first_letter\": \"A\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "?=A:B:C;first_letter=%0"
  },
  {
    "id": "144",
    "input": "test=100%",
    "expected_output": "{\n    \"test\": \"100%\"\n}",
    "tested_features": [
      "pair"
    ],
    "minimised_modl": "test=100%"
  },
  {
    "id": "145",
    "input": "test=`test`",
    "expected_output": "{\n    \"test\": \"test\"\n}",
    "tested_features": [
      "pair",
      "graves"
    ],
    "minimised_modl": "test=test"
  },
  {
    "id": "146",
    "input": "test=!",
    "expected_output": "{\n    \"test\": \"!\"\n}",
    "tested_features": [
      "pair"
    ],
    "minimised_modl": "test=`!`"
  },
  {
    "id": "147",
    "input": "test=[zero;one]",
    "expected_output": "{\n    \"test\": [\n        \"zero\",\n        \"one\"\n    ]\n}",
    "tested_features": [
      "pair",
      "array"
    ],
    "minimised_modl": "test=zero:one"
  },
  {
    "id": "148",
    "input": "_C=fr;\n{C=gb?test1=123};\ntest2=456",
    "expected_output": "{\n    \"test2\": 456\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_C=fr;{C=gb?test1=123};test2=456"
  },
  {
    "id": "149",
    "input": "_C=ca;\n_L=en;\n{\n C=ca?\n  n=Tesco Canada;\n  {L=fr?\n    s=Chaque Petite Contribution\n  }\n}",
    "expected_output": "{\n    \"n\": \"Tesco Canada\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_C=ca;_L=en;{C=ca?n=Tesco Canada;{L=fr?s=Chaque Petite Contribution}}"
  },
  {
    "id": "150",
    "input": "_L=en;\n{\n C=ca?\n    o(\n      n=Tesco Canada;\n      s={L=fr?\n        Chaque Petite Contribution\n      /?\n        Every Little Helps\n      }\n    )\n}",
    "expected_output": "null",
    "tested_features": [
      "object_ref",
      "conditional",
      "null"
    ],
    "minimised_modl": "_L=en;{C=ca?o(n=Tesco Canada;s={L=fr?Chaque Petite Contribution/?Every Little Helps})}"
  },
  {
    "id": "151",
    "input": "_letter=a;\n{\n letter=a?\n   word=Apple\n /letter=b?\n   word=Bee\n /?\n   word=Other\n}",
    "expected_output": "{\n    \"word\": \"Apple\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_letter=a;{letter=a?word=Apple/letter=b?word=Bee/?word=Other}"
  },
  {
    "id": "152",
    "input": "_int=1;\n{\n int=1?\n   number=one\n /int=2?\n   number=two\n /int=3?\n   number=three\n /?\n   number=other\n}",
    "expected_output": "{\n    \"number\": \"one\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_int=1;{int=1?number=one/int=2?number=two/int=3?number=three/?number=other}"
  },
  {
    "id": "153",
    "input": "_number=one;\n{\n number=one?\n   int=1\n /number=two?\n   int=2\n /number=three?\n   int=3\n}",
    "expected_output": "{\n    \"int\": 1\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_number=one;{number=one?int=1/number=two?int=2/number=three?int=3}"
  },
  {
    "id": "154",
    "input": "_co=gb;\n{\nco=gb?\n country = United Kingdom\n/?\n country = Other\n}",
    "expected_output": "{\n    \"country\": \"United Kingdom\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_co=gb;{co=gb?country=United Kingdom/?country=Other}"
  },
  {
    "id": "155",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "156",
    "input": "_co = gb;\ntest = {\n co = gb?\n   test=123\n /?\n   test\n}",
    "expected_output": "{\n    \"test\": {\n        \"test\": 123\n    }\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_co=gb;test={co=gb?test=123/?test}"
  },
  {
    "id": "157",
    "input": "_co = fr;\ntest = {\n co = gb?\n   test=123\n /?\n   test\n}",
    "expected_output": "{\n    \"test\": \"test\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_co=fr;test={co=gb?test=123/?test}"
  },
  {
    "id": "158",
    "input": "_COUNTRY=gb;\ncountry=The country is %COUNTRY",
    "expected_output": "{\n    \"country\": \"The country is gb\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_COUNTRY=gb;country=The country is %COUNTRY"
  },
  {
    "id": "159",
    "input": "COUNTRY=gb;\ncountry=The country is %COUNTRY",
    "expected_output": "{\n    \"COUNTRY\": \"gb\",\n    \"country\": \"The country is gb\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "COUNTRY=gb;country=The country is %COUNTRY"
  },
  {
    "id": "160",
    "input": "_co=gb;\ncountry=The country is %co",
    "expected_output": "{\n    \"country\": \"The country is gb\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_co=gb;country=The country is %co"
  },
  {
    "id": "161",
    "input": "_test = 123;\n_test2 = abc",
    "expected_output": "null",
    "tested_features": [
      "object_ref",
      "null"
    ],
    "minimised_modl": "_test=123;_test2=abc"
  },
  {
    "id": "162",
    "input": "_co=gb;\ntest=123",
    "expected_output": "{\n    \"test\": 123\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_co=gb;test=123"
  },
  {
    "id": "163",
    "input": "*method(\n *id=cn;\n *name=company_name;\n *transform=replace<-, >.trim<.>.initcap\n);\n\n_domain = smiths-limited.com;\nfriendly_name = %domain.cn",
    "expected_output": "{\n    \"friendly_name\": \"Smiths Limited\"\n}",
    "tested_features": [
      "method"
    ],
    "minimised_modl": "*m(*i=cn;*n=company_name;*transform=replace<-, >.trim<.>.initcap);_domain=smiths-limited.com;friendly_name=%domain.cn"
  },
  {
    "id": "164",
    "input": "*method(\n *id=rt;\n *name=remove_two;\n *transform=replace<two,>\n);\n\n_numbers = one two three;\nname = %numbers.rt",
    "expected_output": "{\n    \"name\": \"one  three\"\n}",
    "tested_features": [
      "method"
    ],
    "minimised_modl": "*m(*i=rt;*n=remove_two;*transform=replace<two,>);_numbers=one two three;name=%numbers.rt"
  },
  {
    "id": "165",
    "input": "_co=ca;\n_l=fr;\n{\n { co = ca & l = fr } | co = fr?\n   support_number=14161234567\n /?\n   support_number=441270123456\n}",
    "expected_output": "{\n    \"support_number\": 14161234567\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_co=ca;_l=fr;{{co=ca&l=fr}|co=fr?support_number=14161234567/?support_number=441270123456}"
  },
  {
    "id": "166",
    "input": "_input=\"hi apple ios\";\n{\n {input=*apple*ios*}?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
    "expected_output": "{\n    \"support_number\": 441270123456\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_input=hi apple ios;{{input=*apple*ios*}?support_number=441270123456/?support_number=International Clients:14161234567}"
  },
  {
    "id": "167",
    "input": "_input=\"An iOS string\";\n{\n {input=*iOS*}?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
    "expected_output": "{\n    \"support_number\": 441270123456\n}",
    "tested_features": [
      "undefined"
    ],
    "minimised_modl": "_input=An iOS string;{{input=*iOS*}?support_number=441270123456/?support_number=International Clients:14161234567}"
  },
  {
    "id": "168",
    "input": "_input=\"An iOS string\";\n{\n !{input=iOS*}?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
    "expected_output": "{\n    \"support_number\": 441270123456\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_input=An iOS string;{!{input=iOS*}?support_number=441270123456/?support_number=International Clients:14161234567}"
  },
  {
    "id": "169",
    "input": "_number=42;\n{\n {number>41}?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
    "expected_output": "{\n    \"support_number\": 441270123456\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_number=42;{{number>41}?support_number=441270123456/?support_number=International Clients:14161234567}"
  },
  {
    "id": "170",
    "input": "_co=ca;\n{\n co = fr?\n   support_number=14161234567\n /?\n   support_number=441270123456\n}",
    "expected_output": "{\n    \"support_number\": 441270123456\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_co=ca;{co=fr?support_number=14161234567/?support_number=441270123456}"
  },
  {
    "id": "171",
    "input": "_country=gb;\n{\n country=us/gb/au?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
    "expected_output": "{\n    \"support_number\": 441270123456\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_country=gb;{country=us/gb/au?support_number=441270123456/?support_number=International Clients:14161234567}"
  },
  {
    "id": "172",
    "input": "_test=gb;\nresult={test=gb/au?No/?Yes}",
    "expected_output": "{\n    \"result\": \"No\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_test=gb;result={test=gb/au?No/?Yes}"
  },
  {
    "id": "173",
    "input": "_number=42;\n{\n !{number>41}?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
    "expected_output": "{\n    \"support_number\": [\n        \"International Clients\",\n        14161234567\n    ]\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_number=42;{!{number>41}?support_number=441270123456/?support_number=International Clients:14161234567}"
  },
  {
    "id": "174",
    "input": "_country=gb;\n{\n !{country=us/gb/au}?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
    "expected_output": "{\n    \"support_number\": [\n        \"International Clients\",\n        14161234567\n    ]\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_country=gb;{!{country=us/gb/au}?support_number=441270123456/?support_number=International Clients:14161234567}"
  },
  {
    "id": "175",
    "input": "*L=\"https://www.modl.uk/tests/message-thread.txt\";\n[\nm=out:2018-03-22 15\\:25:Hi;\nm=in:2018-03-22 15\\:26:Hello, how are you?;\nm=out:2018-03-22 15\\:25:Hi, good thanks;\nm=out:2018-03-22 15\\:26:How about you?;\nm=in:2018-03-22 15\\:26:Yes, fine thanks. What are you up to?;\nm=out:2018-03-22 15\\:25:Just testing out MODL;\nm=in:2018-03-22 15\\:26:Cool!\n]",
    "expected_output": "[\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:25\",\n            \"message\": \"Hi\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"in\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"Hello, how are you?\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:25\",\n            \"message\": \"Hi, good thanks\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"How about you?\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"in\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"Yes, fine thanks. What are you up to?\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:25\",\n            \"message\": \"Just testing out MODL\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"in\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"Cool!\",\n            \"method\": \"sms\"\n        }\n    }\n]",
    "tested_features": [
      "load"
    ],
    "minimised_modl": "*L=https~://www.modl.uk/tests/message-thread.txt;[m=out:2018-03-22 15\\:25:Hi;m=in:2018-03-22 15\\:26:Hello, how are you?;m=out:2018-03-22 15\\:25:Hi, good thanks;m=out:2018-03-22 15\\:26:How about you?;m=in:2018-03-22 15\\:26:Yes, fine thanks. What are you up to?;m=out:2018-03-22 15\\:25:Just testing out MODL;m=in:2018-03-22 15\\:26:`Cool!`]"
  },
  {
    "id": "176",
    "input": "_var=2;\n*L=\"http://modl.uk/tests/testing.txt!\";\nprint=%update_date\n",
    "expected_output": "{\n    \"print\": \"20180921 08:20 2\"\n}",
    "tested_features": [
      "object_ref",
      "load"
    ],
    "minimised_modl": "_var=2;*L=`http://modl.uk/tests/testing.txt!`;print=%update_date"
  },
  {
    "id": "177",
    "input": "_T=../grammar/tests/demo;\n*L=%T%_config",
    "expected_output": "null",
    "tested_features": [
      "object_ref",
      "load",
      "null"
    ],
    "minimised_modl": "_T=../grammar/tests/demo;*L=%T%_config"
  },
  {
    "id": "178",
    "input": "*l=../grammar/tests/1;*L=../grammar/tests/1;a=1",
    "expected_output": "{\n    \"a\": 1\n}",
    "tested_features": [
      "load"
    ],
    "minimised_modl": "*l=../grammar/tests/1:../grammar/tests/1;a=1"
  },
  {
    "id": "179",
    "input": "*l=../grammar/tests/1;*l=../grammar/tests/1;a=1",
    "expected_output": "{\n    \"a\": 1\n}",
    "tested_features": [
      "load"
    ],
    "minimised_modl": "*l=../grammar/tests/1:../grammar/tests/1;a=1"
  },
  {
    "id": "180",
    "input": "*l=../grammar/tests/1:../grammar/tests/2:../grammar/tests/3;\nthe_number=%number",
    "expected_output": "{\n    \"the_number\": 3\n}",
    "tested_features": [
      "object_ref",
      "load"
    ],
    "minimised_modl": "*l=../grammar/tests/1:../grammar/tests/2:../grammar/tests/3;the_number=%number"
  },
  {
    "id": "181",
    "input": "*l=../grammar/tests/1:../grammar/tests/2:../grammar/tests/3:../grammar/tests/1;\nthe_number=%number",
    "expected_output": "{\n    \"the_number\": 1\n}",
    "tested_features": [
      "object_ref",
      "load"
    ],
    "minimised_modl": "*l=../grammar/tests/1:../grammar/tests/2:../grammar/tests/3:../grammar/tests/1;the_number=%number"
  },
  {
    "id": "182",
    "input": "*l[../grammar/tests/1;../grammar/tests/2;../grammar/tests/3;../grammar/tests/1];\nthe_number=%number",
    "expected_output": "{\n    \"the_number\": 1\n}",
    "tested_features": [
      "object_ref",
      "load"
    ],
    "minimised_modl": "*l=../grammar/tests/1:../grammar/tests/2:../grammar/tests/3:../grammar/tests/1;the_number=%number"
  },
  {
    "id": "183",
    "input": "*l=../grammar/tests/a:../grammar/tests/b:../grammar/tests/c;\nvar=%var",
    "expected_output": "{\n    \"var\": \"abc\"\n}",
    "tested_features": [
      "object_ref",
      "load"
    ],
    "minimised_modl": "*l=../grammar/tests/a:../grammar/tests/b:../grammar/tests/c;var=%var"
  },
  {
    "id": "184",
    "input": "*L=../grammar/tests/demo_config;\n[\nm=out:2018-03-22 15\\:25:Hi;\nm=in:2018-03-22 15\\:26:Hello, how are you?;\nm=out:2018-03-22 15\\:25:Hi, good thanks;\nm=out:2018-03-22 15\\:26:How about you?;\nm=in:2018-03-22 15\\:26:Yes, fine thanks. What are you up to?;\nm=out:2018-03-22 15\\:25:Just testing out MODL;\nm=in:2018-03-22 15\\:26:Cool!\n]",
    "expected_output": "[\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:25\",\n            \"message\": \"Hi\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"in\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"Hello, how are you?\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:25\",\n            \"message\": \"Hi, good thanks\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"How about you?\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"in\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"Yes, fine thanks. What are you up to?\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:25\",\n            \"message\": \"Just testing out MODL\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"in\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"Cool!\",\n            \"method\": \"sms\"\n        }\n    }\n]",
    "tested_features": [
      "object_ref",
      "load"
    ],
    "minimised_modl": "*L=../grammar/tests/demo_config;[m=out:2018-03-22 15\\:25:Hi;m=in:2018-03-22 15\\:26:Hello, how are you?;m=out:2018-03-22 15\\:25:Hi, good thanks;m=out:2018-03-22 15\\:26:How about you?;m=in:2018-03-22 15\\:26:Yes, fine thanks. What are you up to?;m=out:2018-03-22 15\\:25:Just testing out MODL;m=in:2018-03-22 15\\:26:`Cool!`]"
  },
  {
    "id": "185",
    "input": "## country\n_c = us;\n## language\n_l = en;\n\n*L=../grammar/tests/import_config.modl;\n\ncountry = %c;\nlanguage = %l;\ntime_zone = %tz",
    "expected_output": "{\n    \"country\": \"us\",\n    \"language\": \"en\",\n    \"time_zone\": \"EST\"\n}",
    "tested_features": [
      "object_ref",
      "load",
      "comments"
    ],
    "minimised_modl": "_c=us;_l=en;*L=../grammar/tests/import_config.modl;country=%c;language=%l;time_zone=%tz"
  },
  {
    "id": "186",
    "input": "*L=../grammar/tests/test_import_dir/test_import.txt;\n[\nm=out:2018-03-22 15\\:25:Hi;\nm=in:2018-03-22 15\\:26:Hello, how are you?;\nm=out:2018-03-22 15\\:25:Hi, good thanks;\nm=out:2018-03-22 15\\:26:How about you?;\nm=in:2018-03-22 15\\:26:Yes, fine thanks. What are you up to?;\nm=out:2018-03-22 15\\:25:Just testing out MODL;\nm=in:2018-03-22 15\\:26:Cool!\n]",
    "expected_output": "[\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:25\",\n            \"message\": \"Hi\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"in\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"Hello, how are you?\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:25\",\n            \"message\": \"Hi, good thanks\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"How about you?\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"in\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"Yes, fine thanks. What are you up to?\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:25\",\n            \"message\": \"Just testing out MODL\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"in\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"Cool!\",\n            \"method\": \"sms\"\n        }\n    }\n]",
    "tested_features": [
      "object_ref",
      "load"
    ],
    "minimised_modl": "*L=../grammar/tests/test_import_dir/test_import.txt;[m=out:2018-03-22 15\\:25:Hi;m=in:2018-03-22 15\\:26:Hello, how are you?;m=out:2018-03-22 15\\:25:Hi, good thanks;m=out:2018-03-22 15\\:26:How about you?;m=in:2018-03-22 15\\:26:Yes, fine thanks. What are you up to?;m=out:2018-03-22 15\\:25:Just testing out MODL;m=in:2018-03-22 15\\:26:`Cool!`]"
  },
  {
    "id": "187",
    "input": "o=[test;test;t=Customer Service:44123]",
    "expected_output": "{\n    \"o\": [\n        \"test\",\n        \"test\",\n        {\n            \"t\": [\n                \"Customer Service\",\n                44123\n            ]\n        }\n    ]\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "o[test;test;t=Customer Service:44123]"
  },
  {
    "id": "188",
    "input": "test[number=1;number=2;number=3]",
    "expected_output": "{\n    \"test\": [\n        {\n            \"number\": 1\n        },\n        {\n            \"number\": 2\n        },\n        {\n            \"number\": 3\n        }\n    ]\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "test[number=1;number=2;number=3]"
  },
  {
    "id": "189",
    "input": "test(one=1;two=2;three=3)",
    "expected_output": "{\n    \"test\": {\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3\n    }\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "test(one=1;two=2;three=3)"
  },
  {
    "id": "190",
    "input": "test=test",
    "expected_output": "{\n    \"test\": \"test\"\n}",
    "tested_features": [
      "pair"
    ],
    "minimised_modl": "test=test"
  },
  {
    "id": "191",
    "input": "one=1;two=2;three=3",
    "expected_output": "{\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3\n}",
    "tested_features": [
      "map",
      "pair"
    ],
    "minimised_modl": "one=1;two=2;three=3"
  },
  {
    "id": "192",
    "input": "[o(n=test);o(n=test2)]",
    "expected_output": "[\n    {\n        \"o\": {\n            \"n\": \"test\"\n        }\n    },\n    {\n        \"o\": {\n            \"n\": \"test2\"\n        }\n    }\n]",
    "tested_features": [
      "map",
      "pair"
    ],
    "minimised_modl": "[o(n=test);o(n=test2)]"
  },
  {
    "id": "193",
    "input": "R=0;\nnumber1=1;number2=2;number3=3",
    "expected_output": "{\n    \"R\": 0,\n    \"number1\": 1,\n    \"number2\": 2,\n    \"number3\": 3\n}",
    "tested_features": [
      "map",
      "array",
      "pair"
    ],
    "minimised_modl": "R=0;number1=1;number2=2;number3=3"
  },
  {
    "id": "194",
    "input": "test=(one=1)",
    "expected_output": "{\n    \"test\": {\n        \"one\": 1\n    }\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "test(one=1)"
  },
  {
    "id": "195",
    "input": "test(one=1)",
    "expected_output": "{\n    \"test\": {\n        \"one\": 1\n    }\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "test(one=1)"
  },
  {
    "id": "196",
    "input": "test=[1;2;3]",
    "expected_output": "{\n    \"test\": [\n        1,\n        2,\n        3\n    ]\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "test=1:2:3"
  },
  {
    "id": "197",
    "input": "test[1;2;3]",
    "expected_output": "{\n    \"test\": [\n        1,\n        2,\n        3\n    ]\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "test=1:2:3"
  },
  {
    "id": "198",
    "input": "o(n=Tesco;s=Every Little Helps)",
    "expected_output": "{\n    \"o\": {\n        \"n\": \"Tesco\",\n        \"s\": \"Every Little Helps\"\n    }\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "o(n=Tesco;s=Every Little Helps)"
  },
  {
    "id": "199",
    "input": "o(n=test)",
    "expected_output": "{\n    \"o\": {\n        \"n\": \"test\"\n    }\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "o(n=test)"
  },
  {
    "id": "200",
    "input": "o(n=test)\n",
    "expected_output": "{\n    \"o\": {\n        \"n\": \"test\"\n    }\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "o(n=test)"
  },
  {
    "id": "201",
    "input": "o(\nn=test\n)",
    "expected_output": "{\n    \"o\": {\n        \"n\": \"test\"\n    }\n}",
    "tested_features": [
      "undefined"
    ],
    "minimised_modl": "o(n=test)"
  },
  {
    "id": "202",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "203",
    "input": "o1(n=test);\no2(n=test2)",
    "expected_output": "{\n    \"o1\": {\n        \"n\": \"test\"\n    },\n    \"o2\": {\n        \"n\": \"test2\"\n    }\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "o1(n=test);o2(n=test2)"
  },
  {
    "id": "204",
    "input": "o1(n=test);o2(n=test2)",
    "expected_output": "{\n    \"o1\": {\n        \"n\": \"test\"\n    },\n    \"o2\": {\n        \"n\": \"test2\"\n    }\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "o1(n=test);o2(n=test2)"
  },
  {
    "id": "205",
    "input": "o=[test;test]",
    "expected_output": "{\n    \"o\": [\n        \"test\",\n        \"test\"\n    ]\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "o=test:test"
  },
  {
    "id": "206",
    "input": "o=test",
    "expected_output": "{\n    \"o\": \"test\"\n}",
    "tested_features": [
      "pair"
    ],
    "minimised_modl": "o=test"
  },
  {
    "id": "207",
    "input": "o=[1;2]",
    "expected_output": "{\n    \"o\": [\n        1,\n        2\n    ]\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "o=1:2"
  },
  {
    "id": "208",
    "input": "o=[test1;test2]",
    "expected_output": "{\n    \"o\": [\n        \"test1\",\n        \"test2\"\n    ]\n}",
    "tested_features": [
      "map",
      "array"
    ],
    "minimised_modl": "o=test1:test2"
  },
  {
    "id": "209",
    "input": "o(t=test1;t2=test2)",
    "expected_output": "{\n    \"o\": {\n        \"t\": \"test1\",\n        \"t2\": \"test2\"\n    }\n}",
    "tested_features": [
      "map"
    ],
    "minimised_modl": "o(t=test1;t2=test2)"
  },
  {
    "id": "210",
    "input": "o(t(a=test;b=test2);t2(c=test;d=test2))",
    "expected_output": "{\n    \"o\": {\n        \"t\": {\n            \"a\": \"test\",\n            \"b\": \"test2\"\n        },\n        \"t2\": {\n            \"c\": \"test\",\n            \"d\": \"test2\"\n        }\n    }\n}",
    "tested_features": [
      "map"
    ],
    "minimised_modl": "o(t(a=test;b=test2);t2(c=test;d=test2))"
  },
  {
    "id": "211",
    "input": "o=1:2::4:5",
    "expected_output": "{\n    \"o\": [\n        1,\n        2,\n        null,\n        4,\n        5\n    ]\n}",
    "tested_features": [
      "pair",
      "nbArray",
      "null"
    ],
    "minimised_modl": "o=1:2::4:5"
  },
  {
    "id": "212",
    "input": "o=[1;2;;4;5]",
    "expected_output": "{\n    \"o\": [\n        1,\n        2,\n        null,\n        4,\n        5\n    ]\n}",
    "tested_features": [
      "pair",
      "array",
      "null"
    ],
    "minimised_modl": "o=1:2::4:5"
  },
  {
    "id": "213",
    "input": "o=[1;\n2;\n\n3;\n4;\n5]",
    "expected_output": "{\n    \"o\": [\n        1,\n        2,\n        3,\n        4,\n        5\n    ]\n}",
    "tested_features": [
      "pair",
      "array"
    ],
    "minimised_modl": "o=1:2:3:4:5"
  },
  {
    "id": "214",
    "input": "o=[1 2 3 4 5]",
    "expected_output": "{\n    \"o\": [\n        \"1 2 3 4 5\"\n    ]\n}",
    "tested_features": [
      "pair"
    ],
    "minimised_modl": "o[1 2 3 4 5]"
  },
  {
    "id": "215",
    "input": "o=`ok`",
    "expected_output": "{\n    \"o\": \"ok\"\n}",
    "tested_features": [
      "pair",
      "graves"
    ],
    "minimised_modl": "o=ok"
  },
  {
    "id": "216",
    "input": "o=``",
    "expected_output": "{\n    \"o\": \"\"\n}",
    "tested_features": [
      "pair",
      "graves"
    ],
    "minimised_modl": "o=``"
  },
  {
    "id": "217",
    "input": "_test=(\n  numbers=[[1;2;3;4;5];[6;7;8;9;10]]\n);\n \ntesting=%test.numbers.0.0",
    "expected_output": "{\n    \"testing\": 1\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test(numbers=[1;2;3;4;5]:[6;7;8;9;10]);testing=%test.numbers.0.0"
  },
  {
    "id": "218",
    "input": "_test=(\n  numbers=(\"one\"=1)\n);\n \ntesting = this is a string that includes a reference with a letter s after it %test.numbers.one%s",
    "expected_output": "{\n    \"testing\": \"this is a string that includes a reference with a letter s after it 1s\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test(numbers(one=1));testing=this is a string that includes a reference with a letter s after it %test.numbers.one%s"
  },
  {
    "id": "219",
    "input": "_test=(\n  numbers=(\"v\"=TEST)\n);\n \ntesting = this is a string that includes extra transforms for the value %test.numbers.v.d%_value",
    "expected_output": "{\n    \"testing\": \"this is a string that includes extra transforms for the value test_value\"\n}",
    "tested_features": [
      "object_ref",
      "string_method"
    ],
    "minimised_modl": "_test(numbers(v=TEST));testing=this is a string that includes extra transforms for the value %test.numbers.v.d%_value"
  },
  {
    "id": "220",
    "input": "_test=(\n  first=(\"v\"=TEST);\n  second=(\"v\"=TEST2)\n);\n \ntesting = this is a string that includes extra transforms for the value %test.second.v.d%_value",
    "expected_output": "{\n    \"testing\": \"this is a string that includes extra transforms for the value test2_value\"\n}",
    "tested_features": [
      "object_ref",
      "string_method"
    ],
    "minimised_modl": "_test(first(v=TEST);second(v=TEST2));testing=this is a string that includes extra transforms for the value %test.second.v.d%_value"
  },
  {
    "id": "221",
    "input": "_test=(\n  first=(\"v1\"=one);\n  second=(\"v2\"=two:three)\n);\n \ntesting = %test.second.v2.1",
    "expected_output": "{\n    \"testing\": \"three\"\n}",
    "tested_features": [
      "object_ref",
      "graves"
    ],
    "minimised_modl": "_test(first(v1=one);second(v2=two:three));testing=%test.second.v2.1"
  },
  {
    "id": "222",
    "input": "_test=(\n  first=(\"v1\"=[one]);\n  second=(\"v2\"=two:three)\n);\n \ntesting = %test.first.v1.0%%test.second.v2.0%%test.second.v2.1",
    "expected_output": "{\n    \"testing\": \"onetwothree\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test(first(v1[one]);second(v2=two:three));testing=%test.first.v1.0%%test.second.v2.0%%test.second.v2.1"
  },
  {
    "id": "223",
    "input": "_test=(\n  first=(\"v1\"=(one=(two=three)))\n);\n \ntesting = %test.first.v1.one.two",
    "expected_output": "{\n    \"testing\": \"three\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test(first(v1(one(two=three))));testing=%test.first.v1.one.two"
  },
  {
    "id": "224",
    "input": "b=2;\nc=2;\nd=2;\ne=2;\na={\n  {b=%c & d=%e}?\n    v1:v2:v3\n  /?\n    v4:v5:v6\n  }",
    "expected_output": "{\n    \"b\": 2,\n    \"c\": 2,\n    \"d\": 2,\n    \"e\": 2,\n    \"a\": [\n        \"v1\",\n        \"v2\",\n        \"v3\"\n    ]\n}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "b=2;c=2;d=2;e=2;a={{b=%c&d=%e}?[v1;v2;v3]/?[v4;v5;v6]}"
  },
  {
    "id": "225",
    "input": "o=1:2:3:4:5",
    "expected_output": "{\n    \"o\": [\n        1,\n        2,\n        3,\n        4,\n        5\n    ]\n}",
    "tested_features": [
      "nbArray"
    ],
    "minimised_modl": "o=1:2:3:4:5"
  },
  {
    "id": "226",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "227",
    "input": "o=[1;2;3;4;5]",
    "expected_output": "{\n    \"o\": [\n        1,\n        2,\n        3,\n        4,\n        5\n    ]\n}",
    "tested_features": [
      "array"
    ],
    "minimised_modl": "o=1:2:3:4:5"
  },
  {
    "id": "228",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "229",
    "input": "o=[1;\n2;\n3;\n4;\n5]",
    "expected_output": "{\n    \"o\": [\n        1,\n        2,\n        3,\n        4,\n        5\n    ]\n}",
    "tested_features": [
      "undefined"
    ],
    "minimised_modl": "o=1:2:3:4:5"
  },
  {
    "id": "230",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "231",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "232",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "233",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "234",
    "input": "o=\"ok\"",
    "expected_output": "{\n    \"o\": \"ok\"\n}",
    "tested_features": [
      "pair"
    ],
    "minimised_modl": "o=ok"
  },
  {
    "id": "235",
    "input": "o=\"\"",
    "expected_output": "{\n    \"o\": \"\"\n}",
    "tested_features": [
      "pair"
    ],
    "minimised_modl": "o=``"
  },
  {
    "id": "236",
    "input": "_test=( numbers=[[1;2;3;4;5];[6;7;8;9;10]]\n);\n \ntesting=%test.numbers.0.0",
    "expected_output": "{\n    \"testing\": 1\n}",
    "tested_features": [
      "undefined"
    ],
    "minimised_modl": "_test(numbers=[1;2;3;4;5]:[6;7;8;9;10]);testing=%test.numbers.0.0"
  },
  {
    "id": "237",
    "input": "_test=(\n  numbers=(\"one\"=1)\n);\n\ntesting = this is a string that includes a reference with a letter s after it %test.numbers.one%s",
    "expected_output": "{\n    \"testing\": \"this is a string that includes a reference with a letter s after it 1s\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test(numbers(one=1));testing=this is a string that includes a reference with a letter s after it %test.numbers.one%s"
  },
  {
    "id": "238",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "239",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "240",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "241",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "242",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "243",
    "input": "tony=hungry;\nneeds_food_1={tony=hungry?true/?false};\nneeds_food_2={!tony=hungry?false/?true};\nneeds_food_3={tony!=hungry?false/?true};\nneeds_food_4={!tony!=hungry?true/?false}",
    "expected_output": "{\n    \"tony\": \"hungry\",\n    \"needs_food_1\": true,\n    \"needs_food_2\": true,\n    \"needs_food_3\": true,\n    \"needs_food_4\": true\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "tony=hungry;needs_food_1={tony=hungry?01/?00};needs_food_2={!tony=hungry?00/?01};needs_food_3={tony!=hungry?00/?01};needs_food_4={!tony!=hungry?01/?00}"
  },
  {
    "id": "244",
    "input": "_c=de;\nresult={c!=de/at?German or Austrian/?Other}",
    "expected_output": "{\n    \"result\": \"Other\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_c=de;result={c!=de/at?German or Austrian/?Other}"
  },
  {
    "id": "245",
    "input": "_test = 1;\nresult={!test!=1?one/?Other}",
    "expected_output": "{\n    \"result\": \"one\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "_test=1;result={!test!=1?one/?Other}"
  },
  {
    "id": "246",
    "input": "x=[1;2:3:4]",
    "expected_output": "{\n    \"x\": [\n        1,\n        [\n            2,\n            3,\n            4\n        ]\n    ]\n}",
    "tested_features": [
      "array",
      "pair"
    ],
    "minimised_modl": "x=1:[2;3;4]"
  },
  {
    "id": "247",
    "input": "_x=[1;2:3:4];\na=%x.1.1",
    "expected_output": "{\n    \"a\": 3\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_x=1:[2;3;4];a=%x.1.1"
  },
  {
    "id": "248",
    "input": "x=[1;;;;;;;2:::::::::3;;;;;;;;;;4:::::::::5]",
    "expected_output": "{\n    \"x\": [\n        1,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        [\n            2,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            3\n        ],\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        [\n            4,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            5\n        ]\n    ]\n}",
    "tested_features": [
      "array",
      "map",
      "null"
    ],
    "minimised_modl": "x=1:::::::[2;;;;;;;;;3]::::::::::[4;;;;;;;;;5]"
  },
  {
    "id": "249",
    "input": "*class(\n  *id=p;\n  *name=person;\n  *superclass=map;\n  actions=[call;email]\n);\n*class(\n  *id=c;\n  *name=customer;\n  *superclass=person;\n  *assign=[\n    [title;name;email]\n  ]\n);\n*class(\n  *id=e;\n  *name=employee;\n  *superclass=person;\n  *assign=[\n    [title;name;job_title;email]\n  ]\n);\n[\n## An employee:\ne=Mr:John Smith:Sales Director:john.smith@example.com;\n## A customer:\nc=Mr:Joe Bloggs:joe.bloggs@example.com;\n## Another customer:\nc=Mrs:Jane Wilson:jane.wilson@example.com\n]",
    "expected_output": "[\n    {\n        \"employee\": {\n            \"title\": \"Mr\",\n            \"name\": \"John Smith\",\n            \"job_title\": \"Sales Director\",\n            \"email\": \"john.smith@example.com\",\n            \"actions\": [\n                \"call\",\n                \"email\"\n            ]\n        }\n    },\n    {\n        \"customer\": {\n            \"title\": \"Mr\",\n            \"name\": \"Joe Bloggs\",\n            \"email\": \"joe.bloggs@example.com\",\n            \"actions\": [\n                \"call\",\n                \"email\"\n            ]\n        }\n    },\n    {\n        \"customer\": {\n            \"title\": \"Mrs\",\n            \"name\": \"Jane Wilson\",\n            \"email\": \"jane.wilson@example.com\",\n            \"actions\": [\n                \"call\",\n                \"email\"\n            ]\n        }\n    }\n]",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=p;*n=person;*s=map;actions=call:email);*c(*i=c;*n=customer;*s=person;*a[[title;name;email]]);*c(*i=e;*n=employee;*s=person;*a[[title;name;job_title;email]]);[e=Mr:John Smith:Sales Director:john.smith@example.com;c=Mr:Joe Bloggs:joe.bloggs@example.com;c=Mrs:Jane Wilson:jane.wilson@example.com]"
  },
  {
    "id": "250",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "251",
    "input": "*class(*id=a;*name=alpha);a=b",
    "expected_output": "{\n    \"alpha\": \"b\"\n}",
    "tested_features": [
      "class",
      "superclass_inference"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha);a=b"
  },
  {
    "id": "252",
    "input": "*class(*id=a;*name=alpha);a=1",
    "expected_output": "{\n    \"alpha\": 1\n}",
    "tested_features": [
      "class",
      "superclass_inference"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha);a=1"
  },
  {
    "id": "253",
    "input": "*class(*id=a;*name=alpha);a=true",
    "expected_output": "{\n    \"alpha\": true\n}",
    "tested_features": [
      "class",
      "superclass_inference"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha);a=01"
  },
  {
    "id": "254",
    "input": "*class(*id=a;*name=alpha);a=null",
    "expected_output": "{\n    \"alpha\": null\n}",
    "tested_features": [
      "class",
      "superclass_inference"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha);a=000"
  },
  {
    "id": "255",
    "input": "*class(*id=a;*name=alpha);a=[1;2;3];b=4:5:6",
    "expected_output": "{\n    \"alpha\": [\n        1,\n        2,\n        3\n    ],\n    \"b\": [\n        4,\n        5,\n        6\n    ]\n}",
    "tested_features": [
      "class",
      "superclass_inference"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha);a=1:2:3;b=4:5:6"
  },
  {
    "id": "256",
    "input": "*class(*id=a;*name=alpha);a=(b=c)",
    "expected_output": "{\n    \"alpha\": {\n        \"b\": \"c\"\n    }\n}",
    "tested_features": [
      "class",
      "superclass_inference"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha);a(b=c)"
  },
  {
    "id": "257",
    "input": "*class(*id=a;*name=alpha;x=\"test\");a=1",
    "expected_output": "{\n    \"alpha\": {\n        \"value\": 1,\n        \"x\": \"test\"\n    }\n}",
    "tested_features": [
      "class",
      "superclass_inference"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;x=test);a=1"
  },
  {
    "id": "258",
    "input": "*class(*id=a;*name=alpha;*assign[[x]]);a=1\n",
    "expected_output": "{\n    \"alpha\": {\n        \"x\": 1\n    }\n}",
    "tested_features": [
      "class",
      "superclass_inference"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;*a[[x]]);a=1"
  },
  {
    "id": "259",
    "input": "*class(*id=a;*name=alpha;*superclass=str);a=1",
    "expected_output": "{\n    \"alpha\": \"1\"\n}",
    "tested_features": [
      "class",
      "superclass"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;*s=str);a=1"
  },
  {
    "id": "260",
    "input": "*class(*id=a;*name=alpha;*superclass=str);a=true",
    "expected_output": "{\n    \"alpha\": \"true\"\n}",
    "tested_features": [
      "class",
      "superclass"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;*s=str);a=01"
  },
  {
    "id": "261",
    "input": "*class(*id=a;*name=alpha;*superclass=num);a=1\n",
    "expected_output": "{\n    \"alpha\": 1\n}",
    "tested_features": [
      "class",
      "superclass"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;*s=num);a=1"
  },
  {
    "id": "262",
    "input": "*class(*id=a;*name=alpha;*superclass=num);a=true",
    "expected_output": "{\n    \"alpha\": 1\n}",
    "tested_features": [
      "class",
      "superclass"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;*s=num);a=01"
  },
  {
    "id": "263",
    "input": "*class(*id=a;*name=alpha;*superclass=num);a=false",
    "expected_output": "{\n    \"alpha\": 0\n}",
    "tested_features": [
      "class",
      "superclass"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;*s=num);a=00"
  },
  {
    "id": "264",
    "input": "*class(*id=a;*name=alpha);a=false",
    "expected_output": "{\n    \"alpha\": false\n}",
    "tested_features": [
      "class",
      "superclass"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha);a=00"
  },
  {
    "id": "265",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "266",
    "input": "*class(*id=a;*name=alpha;*superclass=arr);a=b",
    "expected_output": "{\n    \"alpha\": [\n        \"b\"\n    ]\n}",
    "tested_features": [
      "class",
      "superclass"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;*s=arr);a=b"
  },
  {
    "id": "267",
    "input": "*class(*id=a;*name=alpha;*superclass=map);a=b",
    "expected_output": "{\n    \"alpha\": {\n        \"value\": \"b\"\n    }\n}",
    "tested_features": [
      "class",
      "superclass"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;*s=map);a=b"
  },
  {
    "id": "268",
    "input": "*class(*id=a;*name=alpha;*superclass=map);a=(c=d)",
    "expected_output": "{\n    \"alpha\": {\n        \"c\": \"d\"\n    }\n}",
    "tested_features": [
      "class",
      "superclass"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;*s=map);a(c=d)"
  },
  {
    "id": "269",
    "input": "*class(*id=a;*name=alpha;*superclass=arr);a=[1;2;3]",
    "expected_output": "{\n    \"alpha\": [\n        1,\n        2,\n        3\n    ]\n}",
    "tested_features": [
      "class",
      "superclass"
    ],
    "minimised_modl": "*c(*i=a;*n=alpha;*s=arr);a=1:2:3"
  },
  {
    "id": "270",
    "input": "*L=[../grammar/tests/1;../grammar/tests/1];a=1",
    "expected_output": "{\n    \"a\": 1\n}",
    "tested_features": [
      "load"
    ],
    "minimised_modl": "*L=../grammar/tests/1:../grammar/tests/1;a=1"
  },
  {
    "id": "271",
    "input": "*L=../grammar/tests/1:../grammar/tests/1;a=1",
    "expected_output": "{\n    \"a\": 1\n}",
    "tested_features": [
      "load"
    ],
    "minimised_modl": "*l=../grammar/tests/1:../grammar/tests/1;a=1"
  },
  {
    "id": "272",
    "input": "ref=123;\nkey=%ref%%",
    "expected_output": "{\n    \"ref\": 123,\n    \"key\": \"123%\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "ref=123;key=%ref%%"
  },
  {
    "id": "273",
    "input": "a = %`example`.u%.nonsense.s",
    "expected_output": "{\n    \"a\": \"EXAMPLE.nonsense.s\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "a = %`example`.u%.nonsense.s"
  },
  {
    "id": "274",
    "input": "{\n  !one?\n     _one=c\n};\n{\n  !two?\n     _two=d\n};\n\n_file = %one%-%two;\n{\n  file=a-b/c-d/e-f?\n    *LOAD=\"../grammar/tests/files/%file%.txt!\"\n  /?\n    *LOAD=\"../grammar/tests/files/a-b.txt!\"\n};\n\no=%ref.o.name",
    "expected_output": "{\n    \"o\": \"otter\"\n}",
    "tested_features": [
      "object_ref",
      "conditional"
    ],
    "minimised_modl": "{!one?_one=c};{!two?_two=d};_file=%one%-%two;{file=a-b/c-d/e-f?*LOAD=`../grammar/tests/files/%file%.txt!`/?*LOAD=`../grammar/tests/files/a-b.txt!`};o=%ref.o.name"
  },
  {
    "id": "275",
    "input": "vat=20;\ns=VAT at %vat% added",
    "expected_output": "{\n    \"vat\": 20,\n    \"s\": \"VAT at 20 added\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "vat=20;s=VAT at %vat% added"
  },
  {
    "id": "276",
    "input": "vat=20;\ns=VAT at %vat%% added",
    "expected_output": "{\n    \"vat\": 20,\n    \"s\": \"VAT at 20% added\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "vat=20;s=VAT at %vat%% added"
  },
  {
    "id": "277",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "278",
    "input": "x=`ignored method`.p",
    "expected_output": "{\n    \"x\": \"`ignored method`.p\"\n}",
    "tested_features": [
      "method"
    ],
    "minimised_modl": "x=`ignored method`.p"
  },
  {
    "id": "279",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "280",
    "input": "_a=one;\n_b=two;\n_c=three;\n\nd=%a:%b:%c;\ne=[%a;%b;%c]",
    "expected_output": "{\n    \"d\": [\n        \"one\",\n        \"two\",\n        \"three\"\n    ],\n    \"e\": [\n        \"one\",\n        \"two\",\n        \"three\"\n    ]\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_a=one;_b=two;_c=three;d=%a:%b:%c;e=%a:%b:%c"
  },
  {
    "id": "281",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "282",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "283",
    "input": "_x=abc;\ny=`%x`",
    "expected_output": "{\n    \"y\": \"abc\"\n}",
    "tested_features": [
      "graves"
    ],
    "minimised_modl": "_x=abc;y=%x"
  },
  {
    "id": "284",
    "input": "_x=abc;\ny=\"%x\"",
    "expected_output": "{\n    \"y\": \"abc\"\n}",
    "tested_features": [
      "quotes"
    ],
    "minimised_modl": "_x=abc;y=%x"
  },
  {
    "id": "285",
    "input": "_replace_me=new value;\n\none=%replace_me.u;\n\ntwo=`replace_me`.u;\n\nthree=`replace_me.u`;\n\nfour=`%replace_me.u`;\n\nfive=`%replace_me`.u;\n\nsix=%replace_me.u%_added;\n\nseven=replace_me.u;\n\neight=%`replace_me`.u;\n\nnine=%`replace_me`.u%;",
    "expected_output": "{\n    \"one\": \"NEW VALUE\",\n    \"two\": \"`replace_me`.u\",\n    \"three\": \"replace_me.u\",\n    \"four\": \"NEW VALUE\",\n    \"five\": \"`new value`.u\",\n    \"six\": \"NEW VALUE_added\",\n    \"seven\": \"replace_me.u\",\n    \"eight\": \"REPLACE_ME\",\n    \"nine\": \"REPLACE_ME\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_replace_me=new value;one=%replace_me.u;two=`replace_me`.u;three=replace_me.u;four=%replace_me.u;five=`%replace_me`.u;six=%replace_me.u%_added;seven=replace_me.u;eight=%`replace_me`.u;nine=%`replace_me`.u%"
  },
  {
    "id": "286",
    "input": "key=value",
    "expected_output": "{\n    \"key\": \"value\"\n}",
    "tested_features": [
      "pair"
    ],
    "minimised_modl": "key=value"
  },
  {
    "id": "287",
    "input": "key=\"value\"",
    "expected_output": "{\n    \"key\": \"value\"\n}",
    "tested_features": [
      "quotes"
    ],
    "minimised_modl": "key=value"
  },
  {
    "id": "288",
    "input": "key=`value`",
    "expected_output": "{\n    \"key\": \"value\"\n}",
    "tested_features": [
      "graves"
    ],
    "minimised_modl": "key=value"
  },
  {
    "id": "289",
    "input": "_test=abc;\nkey=%test",
    "expected_output": "{\n    \"key\": \"abc\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test=abc;key=%test"
  },
  {
    "id": "290",
    "input": "_test=abc;\nkey=\"%test\"",
    "expected_output": "{\n    \"key\": \"abc\"\n}",
    "tested_features": [
      "object_ref",
      "quotes"
    ],
    "minimised_modl": "_test=abc;key=%test"
  },
  {
    "id": "291",
    "input": "_test=abc;\nkey=`%test`",
    "expected_output": "{\n    \"key\": \"abc\"\n}",
    "tested_features": [
      "object_ref",
      "graves"
    ],
    "minimised_modl": "_test=abc;key=%test"
  },
  {
    "id": "292",
    "input": "key=\"this is a `%test`\"",
    "expected_output": "{\n    \"key\": \"this is a `%test`\"\n}",
    "tested_features": [
      "quotes",
      "graves"
    ],
    "minimised_modl": "key=this is a `%test`"
  },
  {
    "id": "293",
    "input": "key=\"string including ` a single grave\"",
    "expected_output": "{\n    \"key\": \"string including ` a single grave\"\n}",
    "tested_features": [
      "quotes",
      "graves"
    ],
    "minimised_modl": "key=string including ` a single grave"
  },
  {
    "id": "294",
    "input": "key=\"string including some `graved text` here\"",
    "expected_output": "{\n    \"key\": \"string including some `graved text` here\"\n}",
    "tested_features": [
      "quotes",
      "graves"
    ],
    "minimised_modl": "key=string including some `graved text` here"
  },
  {
    "id": "295",
    "input": "key=`string including \" a quote`",
    "expected_output": "{\n    \"key\": \"string including \\\" a quote\"\n}",
    "tested_features": [
      "quotes",
      "graves"
    ],
    "minimised_modl": "key=`string including \" a quote`"
  },
  {
    "id": "296",
    "input": "key=`a string including a quote from Winston: \"We'll fight them on the beaches\"`",
    "expected_output": "{\n    \"key\": \"a string including a quote from Winston: \\\"We'll fight them on the beaches\\\"\"\n}",
    "tested_features": [
      "quotes",
      "graves"
    ],
    "minimised_modl": "key=`a string including a quote from Winston: \"We'll fight them on the beaches\"`"
  },
  {
    "id": "297",
    "input": "key=lots of `graved` text is in `this` value",
    "expected_output": "{\n    \"key\": \"lots of `graved` text is in `this` value\"\n}",
    "tested_features": [
      "quotes",
      "graves"
    ],
    "minimised_modl": "key=lots of `graved` text is in `this` value"
  },
  {
    "id": "298",
    "input": "key=`this `could` be `a` controversial `test` because `the` grammar `splits` this `string` in `a` different `way``",
    "expected_output": "{\n    \"key\": \"this `could` be `a` controversial `test` because `the` grammar `splits` this `string` in `a` different `way`\"\n}",
    "tested_features": [
      "quotes",
      "graves"
    ],
    "minimised_modl": "key=this `could` be `a` controversial `test` because `the` grammar `splits` this `string` in `a` different `way`"
  },
  {
    "id": "299",
    "input": "_test=abc;\nkey=%test.u",
    "expected_output": "{\n    \"key\": \"ABC\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_test=abc;key=%test.u"
  },
  {
    "id": "300",
    "input": "_test=replace the word this in this string;\ntesting=%test.replace<`this`,`that`>",
    "expected_output": "{\n    \"testing\": \"replace the word that in that string\"\n}",
    "tested_features": [
      "method",
      "object_ref",
      "graves"
    ],
    "minimised_modl": "_test=replace the word this in this string;testing=%test.replace<`this`,`that`>"
  },
  {
    "id": "301",
    "input": "_test=replace the word this in this string;\ntesting=%test.replace<this,``>",
    "expected_output": "{\n    \"testing\": \"replace the word  in  string\"\n}",
    "tested_features": [
      "method",
      "object_ref",
      "graves"
    ],
    "minimised_modl": "_test=replace the word this in this string;testing=%test.replace<this,``>"
  },
  {
    "id": "302",
    "input": "key=%`this`.replace<is,at>",
    "expected_output": "{\n    \"key\": \"that\"\n}",
    "tested_features": [
      "method",
      "object_ref",
      "graves"
    ],
    "minimised_modl": "key=%`this`.replace<is,at>"
  },
  {
    "id": "303",
    "input": "key=`this \"is\" a \"string\" with \"lots\" of \"quoted\" strings`",
    "expected_output": "{\n    \"key\": \"this \\\"is\\\" a \\\"string\\\" with \\\"lots\\\" of \\\"quoted\\\" strings\"\n}",
    "tested_features": [
      "graves",
      "quotes"
    ],
    "minimised_modl": "key=`this \"is\" a \"string\" with \"lots\" of \"quoted\" strings`"
  },
  {
    "id": "304",
    "input": "_vat=20;\nkey=vat rate is %vat%%",
    "expected_output": "{\n    \"key\": \"vat rate is 20%\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_vat=20;key=vat rate is %vat%%"
  },
  {
    "id": "305",
    "input": "_vat=20;\nkey=vat rate is %vat%",
    "expected_output": "{\n    \"key\": \"vat rate is 20\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_vat=20;key=vat rate is %vat%"
  },
  {
    "id": "306",
    "input": "_vat=20;\nkey=vat rate is %vat%%",
    "expected_output": "{\n    \"key\": \"vat rate is 20%\"\n}",
    "tested_features": [
      "object_ref",
      "escape"
    ],
    "minimised_modl": "_vat=20;key=vat rate is %vat%%"
  },
  {
    "id": "307",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "308",
    "input": "_vat=20;\nkey=vat rate is %vat %",
    "expected_output": "{\n    \"key\": \"vat rate is 20 %\"\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_vat=20;key=vat rate is %vat %"
  },
  {
    "id": "309",
    "input": "_vat=20;\nkey=`vat rate is %vat%%`",
    "expected_output": "{\n    \"key\": \"vat rate is 20%\"\n}",
    "tested_features": [
      "object_ref",
      "graves"
    ],
    "minimised_modl": "_vat=20;key=vat rate is %vat%%"
  },
  {
    "id": "310",
    "input": "_vat=20;\nkey=\"vat rate is %vat%%\"",
    "expected_output": "{\n    \"key\": \"vat rate is 20%\"\n}",
    "tested_features": [
      "object_ref",
      "quotes"
    ],
    "minimised_modl": "_vat=20;key=vat rate is %vat%%"
  },
  {
    "id": "311",
    "input": "_vat=20;\nkey=\"vat rate is %vat%`%`\"",
    "expected_output": "{\n    \"key\": \"vat rate is 20`%`\"\n}",
    "tested_features": [
      "object_ref",
      "graves"
    ],
    "minimised_modl": "_vat=20;key=vat rate is %vat%`%`"
  },
  {
    "id": "312",
    "input": "_vat=20;\nkey=\"vat rate is %vat`%`\"",
    "expected_output": "{\n    \"key\": \"vat rate is 20`%`\"\n}",
    "tested_features": [
      "object_ref",
      "graves"
    ],
    "minimised_modl": "_vat=20;key=vat rate is %vat`%`"
  },
  {
    "id": "313",
    "input": "_test1=e1afmkfd;\nrussian1=%test1.p;\n\n_test2=\"e1afmkfd\";\nrussian2=%test2.p;\n\n_test3=`e1afmkfd`;\nrussian3=%test3.p;",
    "expected_output": "{\n    \"russian1\": \"пример\",\n    \"russian2\": \"пример\",\n    \"russian3\": \"пример\"\n}",
    "tested_features": [
      "punycode",
      "method"
    ],
    "minimised_modl": "_test1=e1afmkfd;russian1=%test1.p;_test2=e1afmkfd;russian2=%test2.p;_test3=e1afmkfd;russian3=%test3.p"
  },
  {
    "id": "314",
    "input": "_letters=abc;key=\"~%letters\"",
    "expected_output": "{\"key\":\"%letters\"}",
    "tested_features": [
      "escape"
    ],
    "minimised_modl": "_letters=abc;key=`~%letters`"
  },
  {
    "id": "315",
    "input": "_letters=abc;key=\"\\%letters\"",
    "expected_output": "{\"key\":\"%letters\"}",
    "tested_features": [
      "escape"
    ],
    "minimised_modl": "_letters=abc;key=`\\%letters`"
  },
  {
    "id": "316",
    "input": "We\\u2019re=We\\u2019re;You~u2019re=We~u2019re",
    "expected_output": "{\n  \"We’re\": \"We’re\",\n  \"You’re\": \"We’re\"\n}",
    "tested_features": [
      "unicode"
    ],
    "minimised_modl": "We\\u2019re=We\\u2019re;You~u2019re=We~u2019re"
  },
  {
    "id": "317",
    "input": "*class(\n  *id=numbers;\n  *assign=[[one;two;three]]\n);\n*class(\n  *id=letters;\n  *assign=[[a;b;c]]\n);\n*class(\n  *id=myArray;\n  *assign=[[letters;numbers]]\n);\nmyArray=[[a;b;c];[1;2;3]]",
    "expected_output": "{\n  \"myArray\": [\n    {\n      \"a\": \"a\",\n      \"b\": \"b\",\n      \"c\": \"c\"\n    },\n    {\n      \"one\": 1,\n      \"two\": 2,\n      \"three\": 3\n    }\n  ]\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=numbers;*a[[one;two;three]]);*c(*i=letters;*a[[a;b;c]]);*c(*i=myArray;*a[[letters;numbers]]);myArray=[a;b;c]:[1;2;3]"
  },
  {
    "id": "318",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "319",
    "input": "DELETED",
    "expected_output": "DELETED",
    "tested_features": [
      "DELETED"
    ],
    "minimised_modl": "DELETED"
  },
  {
    "id": "320",
    "input": "*class(\n  *id=m;\n  *name=message;\n  *superclass=map;\n  *assign=[\n    [direction;date_time;message]\n  ];\n  method=sms\n);\n\n[\n  m=out:2018-03-22 15\\:25:Hi;\n  m=in:2018-03-22 15\\:26:Hello, how are you?;\n  m=out:2018-03-22 15\\:25:Hi, good thanks;\n  m=out:2018-03-22 15\\:26:How about you?;\n  m=in:2018-03-22 15\\:26:Yes, fine thanks. What are you up to?;\n  m=out:2018-03-22 15\\:25:Just testing out MODL;\n  m=in:2018-03-22 15\\:26:Cool!\n]",
    "expected_output": "[\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:25\",\n            \"message\": \"Hi\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"in\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"Hello, how are you?\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:25\",\n            \"message\": \"Hi, good thanks\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"How about you?\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"in\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"Yes, fine thanks. What are you up to?\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"out\",\n            \"date_time\": \"2018-03-22 15:25\",\n            \"message\": \"Just testing out MODL\",\n            \"method\": \"sms\"\n        }\n    },\n    {\n        \"message\": {\n            \"direction\": \"in\",\n            \"date_time\": \"2018-03-22 15:26\",\n            \"message\": \"Cool!\",\n            \"method\": \"sms\"\n        }\n    }\n]",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=m;*n=message;*s=map;*a[[direction;date_time;message]];method=sms);[m=out:2018-03-22 15\\:25:Hi;m=in:2018-03-22 15\\:26:Hello, how are you?;m=out:2018-03-22 15\\:25:Hi, good thanks;m=out:2018-03-22 15\\:26:How about you?;m=in:2018-03-22 15\\:26:Yes, fine thanks. What are you up to?;m=out:2018-03-22 15\\:25:Just testing out MODL;m=in:2018-03-22 15\\:26:`Cool!`]"
  },
  {
    "id": "321",
    "input": "test=\\~u2019",
    "expected_output": "{\n    \"test\": \"~u2019\"\n}",
    "tested_features": [
      "unicode",
      "escape"
    ],
    "minimised_modl": "test=\\~u2019"
  },
  {
    "id": "322",
    "input": "test=\\\\u2019",
    "expected_output": "{\n    \"test\": \"\\\\u2019\"\n}",
    "tested_features": [
      "unicode",
      "escape"
    ],
    "minimised_modl": "test=\\\\u2019"
  },
  {
    "id": "323",
    "input": "test=\\\\~u2019\\\\u2019~u2019\\\\u2019",
    "expected_output": "{\n    \"test\": \"~u2019\\\\u2019\u2019\\\\u2019\"\n}",
    "tested_features": [
      "unicode",
      "escape"
    ],
    "minimised_modl": "test=\\\\~u2019\\\\u2019~u2019\\\\u2019"
  },
  {
    "id": "324",
    "input": "test=~~u2019",
    "expected_output": "{\n    \"test\": \"~u2019\"\n}",
    "tested_features": [
      "unicode",
      "escape"
    ],
    "minimised_modl": "test=~~u2019"
  },
  {
    "id": "325",
    "input": "test=\\~u2019",
    "expected_output": "{\n    \"test\": \"~u2019\"\n}",
    "tested_features": [
      "unicode",
      "escape"
    ],
    "minimised_modl": "test=\\~u2019"
  },
  {
    "id": "326",
    "input": "*class(\n  *id=v;\n  *name=variants;\n  *assign=[[variant*]]\n);\n\n*class(\n  *id=variant;\n  *assign=[[key1;key2;key3]]\n);\n\nv[[one;two;three];[four;five;six]]",
    "expected_output": "{\n  \"variants\": [\n    {\n      \"key1\": \"one\",\n      \"key2\": \"two\",\n      \"key3\": \"three\"\n    },\n    {\n      \"key1\": \"four\",\n      \"key2\": \"five\",\n      \"key3\": \"six\"\n    }\n  ]\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=v;*n=variants;*a[[variant*]]);*c(*i=variant;*a[[key1;key2;key3]]);v=[one;two;three]:[four;five;six]"
  },
  {
    "id": "327",
    "input": "*class(\n  *id=v;\n  *name=variants;\n  *assign=[[variant*]]\n);\n\n*class(\n  *id=variant;\n  *assign=[[key1;key2;key3]]\n);\n\nv[one:two:three]",
    "expected_output": "{\n    \"variants\": [\n        {\n            \"key1\": \"one\",\n            \"key2\": \"two\",\n            \"key3\": \"three\"\n        }\n    ]\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=v;*n=variants;*a[[variant*]]);*c(*i=variant;*a[[key1;key2;key3]]);v[[one;two;three]]"
  },
  {
    "id": "328",
    "input": "*class(\n  *id=i;\n  *name=images\n);\n\n*class(\n  *id=n;\n  *name=name\n);\n\n*class(\n  *id=t;\n  *name=type\n);\n\n*class(\n  *id=u;\n  *name=url\n);\n\n*class(\n  *id=m;\n  *name=mime\n);\n\n*class(\n  *id=w;\n  *name=width\n);\n\n*class(\n  *id=h;\n  *name=height\n);\n\n*class(\n  *id=v;\n  *name=variants;\n  *assign=[[variant*]]\n);\n\n*class(\n  *id=variant;\n  *assign=[[u;m;w;h]]\n);\n\n_U(\n  ## Logo hosting URLs\n  l=\"https://www.logos.uk/num/\"\n);\n\n_M(\n  ## MIME types\n  p=\"image/png\"\n);i[(t=logo;v[(u=`http://www.bupa.com/~/media/images/site-specific-images/corporate-images/content%20block%20images/dad-kissing-daughter.jpg`;m=image/jpeg;w=541;h=281)]);(t=logo;v[(u=`https://www.bupa.com/favicon.ico`;m=image/jpeg;w=16;h=16)])]",
    "expected_output": "{\n    \"images\": [\n        {\n            \"type\": \"logo\",\n            \"variants\": [\n                {\n                    \"url\": \"http://www.bupa.com//media/images/site-specific-images/corporate-images/content%20block%20images/dad-kissing-daughter.jpg\",\n                    \"mime\": \"image/jpeg\",\n                    \"width\": 541,\n                    \"height\": 281\n                }\n            ]\n        },\n        {\n            \"type\": \"logo\",\n            \"variants\": [\n                {\n                    \"url\": \"https://www.bupa.com/favicon.ico\",\n                    \"mime\": \"image/jpeg\",\n                    \"width\": 16,\n                    \"height\": 16\n                }\n            ]\n        }\n    ]\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*c(*i=i;*n=images);*c(*i=n;*n=name);*c(*i=t;*n=type);*c(*i=u;*n=url);*c(*i=m;*n=mime);*c(*i=w;*n=width);*c(*i=h;*n=height);*c(*i=v;*n=variants;*a[[variant*]]);*c(*i=variant;*a[[u;m;w;h]]);_U(l=https~://www.logos.uk/num/);_M(p=image/png);i=(t=logo;v[(u=`http://www.bupa.com/~/media/images/site-specific-images/corporate-images/content%20block%20images/dad-kissing-daughter.jpg`;m=image/jpeg;w=541;h=281)]):(t=logo;v[(u=https~://www.bupa.com/favicon.ico;m=image/jpeg;w=16;h=16)])"
  },
  {
    "id": "329",
    "input": "*load=\"http://modules.num.uk/3/rcf.txt!\";_n=1;?=tesco.com;i[(t=icon;v[%U.l%%0%.png:%M.p%:300:300])]",
    "expected_output": "{\"images\":[{\"type\":\"icon\",\"variants\":[{\"url\":\"https://www.logos.uk/num/tesco.com.png\",\"mime\":\"image/png\",\"width\":300,\"height\":300}]}]}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "*l=`http://modules.num.uk/3/rcf.txt!`;_n=1;?=tesco.com;i[(t=icon;v[[%U.l%%0%.png;%M.p%;300;300]])]"
  },
  {
    "id": "330",
    "input": "_u=[\"https://www.logos.uk/\"];\nl=%u.0%logo.png",
    "expected_output": "{\"l\": \"https://www.logos.uk/logo.png\"}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_u[https~://www.logos.uk/];l=%u.0%logo.png"
  },
  {
    "id": "331",
    "input": "_C=gb;_L=en;*load=\"http://modules.num.uk/1/rcf.txt!\";o(c[fb=abc;tw=abc])",
    "expected_output": "{\n    \"organisation\": {\n        \"contacts\": [\n            {\n                \"facebook\": {\n                    \"value\": \"abc\",\n                    \"object_type\": \"method\",\n                    \"object_display_name\": \"Facebook\",\n                    \"description_default\": \"View Facebook profile\",\n                    \"prefix\": \"https://www.facebook.com/\",\n                    \"method_type\": \"3p\",\n                    \"controller\": \"facebook.com\"\n                }\n            },\n            {\n                \"twitter\": {\n                    \"value\": \"abc\",\n                    \"object_type\": \"method\",\n                    \"object_display_name\": \"Twitter\",\n                    \"description_default\": \"View Twitter profile\",\n                    \"prefix\": \"https://www.twitter.com/\",\n                    \"method_type\": \"3p\",\n                    \"value_prefix\": \"@\",\n                    \"controller\": \"twitter.com\"\n                }\n            }\n        ],\n        \"object_type\": \"entity\",\n        \"object_display_name\": \"Organisation\",\n        \"description_default\": \"View Organisation\"\n    }\n}",
    "tested_features": [
      "object_ref"
    ],
    "minimised_modl": "_C=gb;_L=en;*l=`http://modules.num.uk/1/rcf.txt!`;o(c[fb=abc;tw=abc])"
  },
  {
    "id": "332",
    "input": "test=~u1f60000",
    "expected_output": "{\n    \"test\": \"\uD83D\uDE0000\"\n}",
    "tested_features": [
      "unicode",
      "escape"
    ],
    "minimised_modl": "test=~u1f60000"
  },
  {
    "id": "333",
    "input": "*L=https~://www.modl.uk/tests/message-thread.txt;\n\nclasses=*class",
    "expected_output": "{\n    \"classes\": \"*class\"\n}",
    "tested_features": [
      "load"
    ],
    "minimised_modl": "*L=https~://www.modl.uk/tests/message-thread.txt;classes=*class"
  },
  {
    "id": "334",
    "input": "@a=b",
    "expected_output": "{\"@a\": \"b\"}",
    "tested_features": [
      "@keys"
    ],
    "minimised_modl": "@a=b"
  },
  {
    "id": "335",
    "input": "country = gb;\nsupport_contact = {\n%_country=gb?\n  John Smith\n/%_country=us?\n  John Doe \n/?\n  None \n}",
    "expected_output": "{\"country\":\"gb\",\"support_contact\":\"John Smith\"}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "country=gb;support_contact={%_country=gb?John Smith/%_country=us?John Doe/?None}"
  },
  {
    "id": "336",
    "input": "country = gb;\nsupport_contact = {\n_country=gb?\n  John Smith\n/_country=us?\n  John Doe \n/?\n  None \n}",
    "expected_output": "{\"country\":\"gb\",\"support_contact\":\"John Smith\"}",
    "tested_features": [
      "conditional"
    ],
    "minimised_modl": "country=gb;support_contact={%_country=gb?John Smith/%_country=us?John Doe/?None}"
  },
  {
    "id": "337",
    "input": "*class(\n  *id=custodian;\n  *assign=[\n    [type;hash;permissions]\n  ]\n);\n\n*class(\n  *id=c;\n  *name=custodians;\n  *assign=[[custodian*]]\n);\n\n_a=[thePermission];\n\n_n=1;c=[[theType;theHash;%a]]",
    "expected_output": "{\n    \"custodians\": [\n        {\n            \"type\": \"theType\",\n            \"hash\": \"theHash\",\n            \"permissions\": [\n                \"thePermission\"\n            ]\n        }\n    ]\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*class(*id=custodian;*assign=[[type;hash;permissions]]);*class(*id=c;*name=custodians;*assign=[[custodian*]]);_a=[thePermission];_n=1;c=[[theType;theHash;%a]]"
  },
  {
    "id": "338",
    "input": "*class(\n  *id=custodian;\n  *assign=[\n    [type;hash;permissions]\n  ]\n);\n\n*class(\n  *id=c;\n  *name=custodians;\n  *assign=[[custodian*]]\n);\n\n_a=thePermission;\n\n_n=1;c=[[theType;theHash;[%a]]]",
    "expected_output": "{\n    \"custodians\": [\n        {\n            \"type\": \"theType\",\n            \"hash\": \"theHash\",\n            \"permissions\": [\n                \"thePermission\"\n            ]\n        }\n    ]\n}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*class(*id=custodian;*assign=[[type;hash;permissions]]);*class(*id=c;*name=custodians;*assign=[[custodian*]]);_a=thePermission;_n=1;c=[[theType;theHash;[%a]]]"
  },
  {
    "id": "339",
    "input": "*class(\n  *id=custodian;\n  *assign=[\n    [type;hash;permissions]\n  ]\n);\n\n*class(\n  *id=c;\n  *name=custodians;\n  *assign=[[custodian*]]\n);\n\n_a=(x=thePermission;y=[1;2;3]);\n\n_n=1;c=[[theType;theHash;[%a]]]",
    "expected_output": "{\"custodians\":[{\"type\":\"theType\",\"hash\":\"theHash\",\"permissions\":[{\"x\":\"thePermission\",\"y\":[1,2,3]}]}]}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*class(*id=custodian;*assign=[[type;hash;permissions]]);*class(*id=c;*name=custodians;*assign=[[custodian*]]);_a=(x=thePermission;y=[1;2;3]);_n=1;c=[[theType;theHash;[%a]]]"
  },
  {
    "id": "340",
    "input": "*class(\n  *id=custodian;\n  *assign=[\n    [type;hash;permissions]\n  ]\n);\n\n*class(\n  *id=c;\n  *name=custodians;\n  *assign=[[custodian*]]\n);\n\n_a=admin;\n_b=bravo;\n_c=charlie;\n\n_n=1;c[single:cd89f92fe06f518536c86ff6e8eb85c2717bae35:[%a;%b;%c]]",
    "expected_output": "{\"custodians\":[{\"type\":\"single\",\"hash\":\"cd89f92fe06f518536c86ff6e8eb85c2717bae35\",\"permissions\":[\"admin\",\"bravo\",\"charlie\"]}]}",
    "tested_features": [
      "class"
    ],
    "minimised_modl": "*class(*id=custodian;*assign=[[type;hash;permissions]]);*class(*id=c;*name=custodians;*assign=[[custodian*]]);_a=admin;_b=bravo;_c=charlie;_n=1;c[single:cd89f92fe06f518536c86ff6e8eb85c2717bae35:[%a;%b;%c]]"
  },
  {
    "id": "341",
    "input": "[1;2;3];(b=c);[4;5;6];(d=f)",
    "expected_output": "[[1,2,3],{\"b\":\"c\"},[4,5,6],{\"d\":\"f\"}]",
    "tested_features": [
      "array"
    ],
    "minimised_modl": "[1;2;3];(b=c);[4;5;6];(d=f)"
  },
  {
    "id": "342",
    "input": "_here = 1;test=%`%missing`;test2=%`%here`",
    "expected_output": "{\"test\":\"%missing\",\"test2\":\"%here\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_here = 1;test=%`%missing`;test2=%`%here`"
  },
  {
    "id": "343",
    "input": "test=Hello %missing",
    "expected_output": "{\"test\":\"Hello %missing\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "test=Hello %missing"
  },
  {
    "id": "344",
    "input": "?=a:b:c:d;test=%`%0`",
    "expected_output": "{\"test\":\"%0\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "?=a:b:c:d;test=%`%0`"
  },
  {
    "id": "345",
    "input": "?=a:b:c:d;test=%`0%`",
    "expected_output": "{\"test\":\"0%\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "?=a:b:c:d;test=%`0%`"
  },
  {
    "id": "346",
    "input": "?=a:b:c:d;_x=xxx;test=%`%0 %x x%`",
    "expected_output": "{\"test\":\"%0 %x x%\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "?=a:b:c:d;_x=xxx;test=%`%0 %x x%`"
  },
  {
    "id": "347",
    "input": "_locale=uk;url=`https://www.example.com/%locale/file`;",
    "expected_output": "{\"url\":\"https://www.example.com/uk/file\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_locale=uk;url=`https://www.example.com/%locale/file`;"
  },
  {
    "id": "348",
    "input": "## use a defined reference in a string that's defined\n_here1 = 1;\ntest1 = this reference is %here1;",
    "expected_output": "{\"test1\": \"this reference is 1\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_here1=1;test1=this reference is %here1;"
  },
  {
    "id": "349",
    "input": "## use an undefined reference in a string\n_there2 = 1;\ntest2 = this reference is %here2;",
    "expected_output": "{\"test2\": \"this reference is %here2\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_there2=1;test2=this reference is %here2;"
  },
  {
    "id": "350",
    "input": "## use a defined reference as a value\n_here3 = 3;\ntest3 = %here3;",
    "expected_output": "{\"test3\": 3}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_here3=3;test3=%here3;"
  },
  {
    "id": "351",
    "input": "## use an undefined reference as a value\n_there4 = 1;\ntest4 = %here4;",
    "expected_output": "{\"test4\": \"%here4\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_there4=1;test4=%here4;"
  },
  {
    "id": "352",
    "input": "## use a defined reference in a graved string\n_here5 = 1;\ntest5 = `this reference is %here5`;",
    "expected_output": "{\"test5\": \"this reference is 1\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_here5=1;test5=`this reference is %here5`;"
  },
  {
    "id": "353",
    "input": "## use an undefined reference in a graved string\n_there6 = 1;\ntest6 = `this reference is %here6`;",
    "expected_output": "{\"test6\": \"this reference is %here6\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_there6=1;test6=`this reference is %here6`;"
  },
  {
    "id": "354",
    "input": "## use a defined reference in a quoted string\n_here7 = 1;\ntest7 = \"this reference is %here7\";\n",
    "expected_output": "{\"test7\": \"this reference is 1\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_here7=1;test7=\"this reference is %here7\";"
  },
  {
    "id": "355",
    "input": "## use an undefined reference in a string\n_there8 = 1;\ntest8 = \"this reference is %here8\";",
    "expected_output": "{\"test8\": \"this reference is %here8\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_there8=1;test8=\"this reference is %here8\";"
  },
  {
    "id": "356",
    "input": "## including percent prefix text when there's a reference defined\n_here9 = 1;\ntest9 = this reference is %`%here9`;",
    "expected_output": "{\"test9\": \"this reference is %here9\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_here9=1;test9=this reference is %`%here9`;"
  },
  {
    "id": "357",
    "input": "## including percent prefix text in a quoted value\n_here10 = 1;\ntest10 = \"this reference is %`%here10`\";",
    "expected_output": "{\"test10\": \"this reference is %here10\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_here10=1;test10=\"this reference is %`%here10`\";"
  },
  {
    "id": "358",
    "input": "## including percent prefix text in a graved value\n_here11 = 1;\ntest11 = `this reference is %`%here11``;",
    "expected_output": "{\"test11\": \"this reference is %here11\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_here11=1;test11=`this reference is %`%here11``;"
  },
  {
    "id": "359",
    "input": "name=%`%-et3caab`.p",
    "expected_output": "{\"name\":\"看看看%看\"}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "name=%`%-et3caab`.p"
  },
  {
    "id": "360",
    "input": "_a=1;\n_b(\n   _a=2;\n   _c(\n       _a=3\n   )\n);\n\nx=%a;\ny = %b.a;\nz = %b.c.a",
    "expected_output": "{\"x\":1,\"y\":2,\"z\":3}",
    "tested_features": [
      "refs"
    ],
    "minimised_modl": "_a=1;_b(_a=2;_c(_a=3));x=%a;y = %b.a;z = %b.c.a"
  },
  {
    "id": "361",
    "input": "()",
    "expected_output": "{}",
    "tested_features": [
    ],
    "minimised_modl": "()"
  },
  {
    "id": "362",
    "input": "[]",
    "expected_output": "[]",
    "tested_features": [
    ],
    "minimised_modl": "[]"
  },
  {
    "id": "363",
    "input": "x=%z;\ny=%x;\nz=%y",
    "expected_output": "{\n    \"x\": \"%z\",\n    \"y\": \"%z\",\n    \"z\": \"%z\"\n}",
    "tested_features": [
    ],
    "minimised_modl": "x=%z;y=%x;z=%y"
  },
  {
    "id": "364",
    "input": "*class(\n  *id=h;\n  *name=hours;\n  *assign=[\n    [time_zone_city;available]\n  ]\n);\n\nperson(h=AD:[d@0-0])",
    "expected_output": "{\"person\":{\"hours\":{\"time_zone_city\":\"AD\",\"available\":[\"d@0-0\"]}}}",
    "tested_features": [
    ],
    "minimised_modl": "*class(*id=h;*name=hours;*assign=[[time_zone_city;available]]);person(h=AD:[d@0-0])"
  },
  {
    "id": "365",
    "input": "_vars(\n  test=1\n);\nprint_var = %vars.test,",
    "expected_output": "{\"print_var\":\"1,\"}",
    "tested_features": [
    ],
    "minimised_modl": "_vars(test=1);print_var=%vars.test,"
  }
]